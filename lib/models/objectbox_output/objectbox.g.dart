// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again
// with `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types, depend_on_referenced_packages
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'
    as obx_int; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart' as obx;
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import '../../models/item.entity.dart';
import '../../models/picker.entity.dart';
import '../../models/pickup.entity.dart';
import '../../models/product.entity.dart';
import '../../models/route.entity.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <obx_int.ModelEntity>[
  obx_int.ModelEntity(
      id: const obx_int.IdUid(1, 3647033658409699425),
      name: 'Item',
      lastPropertyId: const obx_int.IdUid(13, 4278148028726656131),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 1322109077305042849),
            name: 'obxId',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 247339018156602338),
            name: 'id',
            type: 9,
            flags: 2080,
            indexId: const obx_int.IdUid(1, 2313384049095609502)),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 1649343047595435191),
            name: 'productRefId',
            type: 11,
            flags: 520,
            indexId: const obx_int.IdUid(2, 8592331478245401921),
            relationTarget: 'Product'),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 8280072194251662269),
            name: 'pickupId',
            type: 11,
            flags: 520,
            indexId: const obx_int.IdUid(3, 8605713273026118524),
            relationTarget: 'Pickup'),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 125008882924616440),
            name: 'createdAt',
            type: 10,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 5957112636219597871),
            name: 'localImagePaths',
            type: 30,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 5536886676443353665),
            name: 'imageUrls',
            type: 30,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(8, 6832656818320124970),
            name: 'isUploaded',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(9, 7178083298772884945),
            name: 'totalPrice',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(10, 6909274945856951762),
            name: 'customPrice',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(11, 8692766262218993373),
            name: 'weight',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(12, 3855520001340210942),
            name: 'quantity',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(13, 4278148028726656131),
            name: 'coordinates',
            type: 30,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(2, 3499062822283679481),
      name: 'Picker',
      lastPropertyId: const obx_int.IdUid(15, 6023074019746406043),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 8314008027966298228),
            name: 'obxId',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 5020205973696603870),
            name: 'id',
            type: 9,
            flags: 2080,
            indexId: const obx_int.IdUid(4, 3682713917540823008)),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 8627885469762187926),
            name: 'name',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 5761886418214060758),
            name: 'email',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 750408345269233354),
            name: 'licenseNo',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 3460085882618159150),
            name: 'phoneNo',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 7844116810777831617),
            name: 'isAvailable',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(8, 1233029182517145552),
            name: 'isDriver',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(9, 8391164291390453409),
            name: 'isHelper',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(10, 1328413011392562589),
            name: 'isOnLeave',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(11, 2122959790375096085),
            name: 'isPicker',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(12, 7694050225210338490),
            name: 'isWorking',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(13, 8868498782434592399),
            name: 'routeName',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(14, 6719664997820649904),
            name: 'assignedVehicleId',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(15, 6023074019746406043),
            name: 'assignedVehicleName',
            type: 9,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(3, 4524830248819560669),
      name: 'Pickup',
      lastPropertyId: const obx_int.IdUid(34, 5997213107813513016),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 8830903428903477154),
            name: 'obxId',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 5313038494781644158),
            name: 'id',
            type: 9,
            flags: 2080,
            indexId: const obx_int.IdUid(5, 776316616095459848)),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 3282101039302408929),
            name: 'firebaseIndex',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 6630882644611377850),
            name: 'name',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 6015255730337998695),
            name: 'mobileNo',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 4454327885273844939),
            name: 'address',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 2173064974354681515),
            name: 'area',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(8, 2630647186908017995),
            name: 'pincode',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(9, 6276025324422526039),
            name: 'aov',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(10, 2061485383797670252),
            name: 'description',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(11, 5133901119980439547),
            name: 'expectedWeight',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(12, 6155851859633449714),
            name: 'items',
            type: 30,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(13, 5645036926989233304),
            name: 'routeModelId',
            type: 11,
            flags: 520,
            indexId: const obx_int.IdUid(6, 5737767317417573135),
            relationTarget: 'RouteModel'),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(14, 2120329357333915293),
            name: 'slot',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(15, 8698588829538967037),
            name: 'finalSlot',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(16, 62571810724518853),
            name: 'status',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(17, 6405587990205067554),
            name: 'subStatus',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(18, 1638793154381925846),
            name: 'isCompleted',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(19, 3610707955158825955),
            name: 'isLocked',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(20, 4009101271381943011),
            name: 'lockedBy',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(21, 7033087422162197779),
            name: 'pickerId',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(22, 3902465263740290773),
            name: 'pickerPhoneNo',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(23, 4027711034227314849),
            name: 'helperId',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(24, 4655357118912138576),
            name: 'helperPhoneNo',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(25, 2000592081910937505),
            name: 'routeId',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(26, 7227035950931356317),
            name: 'mapLink',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(27, 8795241633232125482),
            name: 'coordinates',
            type: 30,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(28, 8753400249586304795),
            name: 'totalPrice',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(29, 5857162600044542677),
            name: 'totalWeightQuantity',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(30, 5107347732320985238),
            name: 'createdAt',
            type: 10,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(31, 7019963449942266440),
            name: 'date',
            type: 10,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(32, 7055597313563106130),
            name: 'finalDate',
            type: 10,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(33, 4762735058724552472),
            name: 'updatedAt',
            type: 12,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(34, 5997213107813513016),
            name: 'completedAt',
            type: 12,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[
        obx_int.ModelBacklink(
            name: 'itemsData', srcEntity: 'Item', srcField: 'pickup')
      ]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(4, 4438245468046021917),
      name: 'Product',
      lastPropertyId: const obx_int.IdUid(5, 2549285746337794808),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 6581673323777569260),
            name: 'obxId',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 1010674370842179722),
            name: 'id',
            type: 9,
            flags: 2080,
            indexId: const obx_int.IdUid(7, 366559691916291565)),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 5141925006218215191),
            name: 'name',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 2602152634755786670),
            name: 'price',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 2549285746337794808),
            name: 'unit',
            type: 9,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(5, 5973206277801937997),
      name: 'RouteModel',
      lastPropertyId: const obx_int.IdUid(11, 1803655940889327948),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 8451399680287254762),
            name: 'obxId',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 1358936430378888721),
            name: 'id',
            type: 9,
            flags: 2080,
            indexId: const obx_int.IdUid(8, 9009702185145953642)),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 503851572910096226),
            name: 'name',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 823828170414892913),
            name: 'mapLink',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 7061528622955075248),
            name: 'morningAssetCheck',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 8351414650719990514),
            name: 'eveningAssetCheck',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 7370068806018240265),
            name: 'pickerFirebaseId',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(8, 4184521304928893870),
            name: 'helperId',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(9, 6108113720106004663),
            name: 'pickupIds',
            type: 30,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(10, 7722640618588450751),
            name: 'scheduledDate',
            type: 10,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(11, 1803655940889327948),
            name: 'updatedAt',
            type: 12,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[
        obx_int.ModelBacklink(
            name: 'pickupsData', srcEntity: 'Pickup', srcField: 'routeModel')
      ])
];

/// Shortcut for [obx.Store.new] that passes [getObjectBoxModel] and for Flutter
/// apps by default a [directory] using `defaultStoreDirectory()` from the
/// ObjectBox Flutter library.
///
/// Note: for desktop apps it is recommended to specify a unique [directory].
///
/// See [obx.Store.new] for an explanation of all parameters.
///
/// For Flutter apps, also calls `loadObjectBoxLibraryAndroidCompat()` from
/// the ObjectBox Flutter library to fix loading the native ObjectBox library
/// on Android 6 and older.
Future<obx.Store> openStore(
    {String? directory,
    int? maxDBSizeInKB,
    int? maxDataSizeInKB,
    int? fileMode,
    int? maxReaders,
    bool queriesCaseSensitiveDefault = true,
    String? macosApplicationGroup}) async {
  await loadObjectBoxLibraryAndroidCompat();
  return obx.Store(getObjectBoxModel(),
      directory: directory ?? (await defaultStoreDirectory()).path,
      maxDBSizeInKB: maxDBSizeInKB,
      maxDataSizeInKB: maxDataSizeInKB,
      fileMode: fileMode,
      maxReaders: maxReaders,
      queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
      macosApplicationGroup: macosApplicationGroup);
}

/// Returns the ObjectBox model definition for this project for use with
/// [obx.Store.new].
obx_int.ModelDefinition getObjectBoxModel() {
  final model = obx_int.ModelInfo(
      entities: _entities,
      lastEntityId: const obx_int.IdUid(5, 5973206277801937997),
      lastIndexId: const obx_int.IdUid(8, 9009702185145953642),
      lastRelationId: const obx_int.IdUid(0, 0),
      lastSequenceId: const obx_int.IdUid(0, 0),
      retiredEntityUids: const [],
      retiredIndexUids: const [],
      retiredPropertyUids: const [],
      retiredRelationUids: const [],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, obx_int.EntityDefinition>{
    Item: obx_int.EntityDefinition<Item>(
        model: _entities[0],
        toOneRelations: (Item object) => [object.productRef, object.pickup],
        toManyRelations: (Item object) => {},
        getId: (Item object) => object.obxId,
        setId: (Item object, int id) {
          object.obxId = id;
        },
        objectToFB: (Item object, fb.Builder fbb) {
          final idOffset = fbb.writeString(object.id);
          final localImagePathsOffset = object.localImagePaths == null
              ? null
              : fbb.writeList(object.localImagePaths!
                  .map(fbb.writeString)
                  .toList(growable: false));
          final imageUrlsOffset = object.imageUrls == null
              ? null
              : fbb.writeList(object.imageUrls!
                  .map(fbb.writeString)
                  .toList(growable: false));
          final coordinatesOffset = fbb.writeList(
              object.coordinates.map(fbb.writeString).toList(growable: false));
          fbb.startTable(14);
          fbb.addInt64(0, object.obxId);
          fbb.addOffset(1, idOffset);
          fbb.addInt64(2, object.productRef.targetId);
          fbb.addInt64(3, object.pickup.targetId);
          fbb.addInt64(4, object.createdAt.millisecondsSinceEpoch);
          fbb.addOffset(5, localImagePathsOffset);
          fbb.addOffset(6, imageUrlsOffset);
          fbb.addBool(7, object.isUploaded);
          fbb.addFloat64(8, object.totalPrice);
          fbb.addFloat64(9, object.customPrice);
          fbb.addFloat64(10, object.weight);
          fbb.addFloat64(11, object.quantity);
          fbb.addOffset(12, coordinatesOffset);
          fbb.finish(fbb.endTable());
          return object.obxId;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final obxIdParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final idParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final createdAtParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 12, 0));
          final customPriceParam = const fb.Float64Reader()
              .vTableGetNullable(buffer, rootOffset, 22);
          final isUploadedParam =
              const fb.BoolReader().vTableGet(buffer, rootOffset, 18, false);
          final localImagePathsParam = const fb.ListReader<String>(
                  fb.StringReader(asciiOptimization: true),
                  lazy: false)
              .vTableGetNullable(buffer, rootOffset, 14);
          final imageUrlsParam = const fb.ListReader<String>(
                  fb.StringReader(asciiOptimization: true),
                  lazy: false)
              .vTableGetNullable(buffer, rootOffset, 16);
          final totalPriceParam =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 20, 0);
          final weightParam =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 24, 0);
          final quantityParam =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 26, 0);
          final coordinatesParam = const fb.ListReader<String>(
                  fb.StringReader(asciiOptimization: true),
                  lazy: false)
              .vTableGet(buffer, rootOffset, 28, []);
          final object = Item(
              obxId: obxIdParam,
              id: idParam,
              createdAt: createdAtParam,
              customPrice: customPriceParam,
              isUploaded: isUploadedParam,
              localImagePaths: localImagePathsParam,
              imageUrls: imageUrlsParam,
              totalPrice: totalPriceParam,
              weight: weightParam,
              quantity: quantityParam,
              coordinates: coordinatesParam);
          object.productRef.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0);
          object.productRef.attach(store);
          object.pickup.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 10, 0);
          object.pickup.attach(store);
          return object;
        }),
    Picker: obx_int.EntityDefinition<Picker>(
        model: _entities[1],
        toOneRelations: (Picker object) => [],
        toManyRelations: (Picker object) => {},
        getId: (Picker object) => object.obxId,
        setId: (Picker object, int id) {
          object.obxId = id;
        },
        objectToFB: (Picker object, fb.Builder fbb) {
          final idOffset = fbb.writeString(object.id);
          final nameOffset = fbb.writeString(object.name);
          final emailOffset = fbb.writeString(object.email);
          final licenseNoOffset = fbb.writeString(object.licenseNo);
          final phoneNoOffset = fbb.writeString(object.phoneNo);
          final routeNameOffset = fbb.writeString(object.routeName);
          final assignedVehicleIdOffset =
              fbb.writeString(object.assignedVehicleId);
          final assignedVehicleNameOffset =
              fbb.writeString(object.assignedVehicleName);
          fbb.startTable(16);
          fbb.addInt64(0, object.obxId);
          fbb.addOffset(1, idOffset);
          fbb.addOffset(2, nameOffset);
          fbb.addOffset(3, emailOffset);
          fbb.addOffset(4, licenseNoOffset);
          fbb.addOffset(5, phoneNoOffset);
          fbb.addBool(6, object.isAvailable);
          fbb.addBool(7, object.isDriver);
          fbb.addBool(8, object.isHelper);
          fbb.addBool(9, object.isOnLeave);
          fbb.addBool(10, object.isPicker);
          fbb.addBool(11, object.isWorking);
          fbb.addOffset(12, routeNameOffset);
          fbb.addOffset(13, assignedVehicleIdOffset);
          fbb.addOffset(14, assignedVehicleNameOffset);
          fbb.finish(fbb.endTable());
          return object.obxId;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final obxIdParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final idParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final nameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 8, '');
          final emailParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 10, '');
          final licenseNoParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 12, '');
          final phoneNoParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 14, '');
          final isAvailableParam =
              const fb.BoolReader().vTableGet(buffer, rootOffset, 16, false);
          final isDriverParam =
              const fb.BoolReader().vTableGet(buffer, rootOffset, 18, false);
          final isHelperParam =
              const fb.BoolReader().vTableGet(buffer, rootOffset, 20, false);
          final isOnLeaveParam =
              const fb.BoolReader().vTableGet(buffer, rootOffset, 22, false);
          final isPickerParam =
              const fb.BoolReader().vTableGet(buffer, rootOffset, 24, false);
          final isWorkingParam =
              const fb.BoolReader().vTableGet(buffer, rootOffset, 26, false);
          final routeNameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 28, '');
          final assignedVehicleIdParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 30, '');
          final assignedVehicleNameParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 32, '');
          final object = Picker(
              obxId: obxIdParam,
              id: idParam,
              name: nameParam,
              email: emailParam,
              licenseNo: licenseNoParam,
              phoneNo: phoneNoParam,
              isAvailable: isAvailableParam,
              isDriver: isDriverParam,
              isHelper: isHelperParam,
              isOnLeave: isOnLeaveParam,
              isPicker: isPickerParam,
              isWorking: isWorkingParam,
              routeName: routeNameParam,
              assignedVehicleId: assignedVehicleIdParam,
              assignedVehicleName: assignedVehicleNameParam);

          return object;
        }),
    Pickup: obx_int.EntityDefinition<Pickup>(
        model: _entities[2],
        toOneRelations: (Pickup object) => [object.routeModel],
        toManyRelations: (Pickup object) => {
              obx_int.RelInfo<Item>.toOneBacklink(
                      4, object.obxId, (Item srcObject) => srcObject.pickup):
                  object.itemsData
            },
        getId: (Pickup object) => object.obxId,
        setId: (Pickup object, int id) {
          object.obxId = id;
        },
        objectToFB: (Pickup object, fb.Builder fbb) {
          final idOffset = fbb.writeString(object.id);
          final nameOffset = fbb.writeString(object.name);
          final mobileNoOffset = fbb.writeString(object.mobileNo);
          final addressOffset = fbb.writeString(object.address);
          final areaOffset = fbb.writeString(object.area);
          final pincodeOffset = fbb.writeString(object.pincode);
          final aovOffset = fbb.writeString(object.aov);
          final descriptionOffset = fbb.writeString(object.description);
          final expectedWeightOffset = fbb.writeString(object.expectedWeight);
          final itemsOffset = fbb.writeList(
              object.items.map(fbb.writeString).toList(growable: false));
          final slotOffset = fbb.writeString(object.slot);
          final finalSlotOffset = fbb.writeString(object.finalSlot);
          final statusOffset = fbb.writeString(object.status);
          final subStatusOffset = fbb.writeString(object.subStatus);
          final lockedByOffset = fbb.writeString(object.lockedBy);
          final pickerIdOffset = fbb.writeString(object.pickerId);
          final pickerPhoneNoOffset = fbb.writeString(object.pickerPhoneNo);
          final helperIdOffset = fbb.writeString(object.helperId);
          final helperPhoneNoOffset = fbb.writeString(object.helperPhoneNo);
          final routeIdOffset = fbb.writeString(object.routeId);
          final mapLinkOffset = fbb.writeString(object.mapLink);
          final coordinatesOffset = fbb.writeList(
              object.coordinates.map(fbb.writeString).toList(growable: false));
          fbb.startTable(35);
          fbb.addInt64(0, object.obxId);
          fbb.addOffset(1, idOffset);
          fbb.addInt64(2, object.firebaseIndex);
          fbb.addOffset(3, nameOffset);
          fbb.addOffset(4, mobileNoOffset);
          fbb.addOffset(5, addressOffset);
          fbb.addOffset(6, areaOffset);
          fbb.addOffset(7, pincodeOffset);
          fbb.addOffset(8, aovOffset);
          fbb.addOffset(9, descriptionOffset);
          fbb.addOffset(10, expectedWeightOffset);
          fbb.addOffset(11, itemsOffset);
          fbb.addInt64(12, object.routeModel.targetId);
          fbb.addOffset(13, slotOffset);
          fbb.addOffset(14, finalSlotOffset);
          fbb.addOffset(15, statusOffset);
          fbb.addOffset(16, subStatusOffset);
          fbb.addBool(17, object.isCompleted);
          fbb.addBool(18, object.isLocked);
          fbb.addOffset(19, lockedByOffset);
          fbb.addOffset(20, pickerIdOffset);
          fbb.addOffset(21, pickerPhoneNoOffset);
          fbb.addOffset(22, helperIdOffset);
          fbb.addOffset(23, helperPhoneNoOffset);
          fbb.addOffset(24, routeIdOffset);
          fbb.addOffset(25, mapLinkOffset);
          fbb.addOffset(26, coordinatesOffset);
          fbb.addFloat64(27, object.totalPrice);
          fbb.addFloat64(28, object.totalWeightQuantity);
          fbb.addInt64(29, object.createdAt.millisecondsSinceEpoch);
          fbb.addInt64(30, object.date.millisecondsSinceEpoch);
          fbb.addInt64(31, object.finalDate.millisecondsSinceEpoch);
          fbb.addInt64(
              32,
              object.updatedAt == null
                  ? null
                  : object.updatedAt!.microsecondsSinceEpoch * 1000);
          fbb.addInt64(
              33,
              object.completedAt == null
                  ? null
                  : object.completedAt!.microsecondsSinceEpoch * 1000);
          fbb.finish(fbb.endTable());
          return object.obxId;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final updatedAtValue =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 68);
          final completedAtValue =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 70);
          final obxIdParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final idParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final firebaseIndexParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0);
          final nameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 10, '');
          final mobileNoParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 12, '');
          final addressParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 14, '');
          final areaParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 16, '');
          final pincodeParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 18, '');
          final aovParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 20, '');
          final descriptionParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 22, '');
          final expectedWeightParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 24, '');
          final itemsParam = const fb.ListReader<String>(
                  fb.StringReader(asciiOptimization: true),
                  lazy: false)
              .vTableGet(buffer, rootOffset, 26, []);
          final slotParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 30, '');
          final finalSlotParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 32, '');
          final statusParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 34, '');
          final subStatusParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 36, '');
          final isCompletedParam =
              const fb.BoolReader().vTableGet(buffer, rootOffset, 38, false);
          final isLockedParam =
              const fb.BoolReader().vTableGet(buffer, rootOffset, 40, false);
          final lockedByParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 42, '');
          final pickerIdParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 44, '');
          final pickerPhoneNoParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 46, '');
          final helperIdParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 48, '');
          final helperPhoneNoParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 50, '');
          final routeIdParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 52, '');
          final mapLinkParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 54, '');
          final createdAtParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 62, 0));
          final dateParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 64, 0));
          final finalDateParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 66, 0));
          final updatedAtParam = updatedAtValue == null
              ? null
              : DateTime.fromMicrosecondsSinceEpoch(
                  (updatedAtValue / 1000).round());
          final coordinatesParam = const fb.ListReader<String>(
                  fb.StringReader(asciiOptimization: true),
                  lazy: false)
              .vTableGet(buffer, rootOffset, 56, []);
          final totalPriceParam =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 58, 0);
          final totalWeightQuantityParam =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 60, 0);
          final completedAtParam = completedAtValue == null
              ? null
              : DateTime.fromMicrosecondsSinceEpoch(
                  (completedAtValue / 1000).round());
          final object = Pickup(
              obxId: obxIdParam,
              id: idParam,
              firebaseIndex: firebaseIndexParam,
              name: nameParam,
              mobileNo: mobileNoParam,
              address: addressParam,
              area: areaParam,
              pincode: pincodeParam,
              aov: aovParam,
              description: descriptionParam,
              expectedWeight: expectedWeightParam,
              items: itemsParam,
              slot: slotParam,
              finalSlot: finalSlotParam,
              status: statusParam,
              subStatus: subStatusParam,
              isCompleted: isCompletedParam,
              isLocked: isLockedParam,
              lockedBy: lockedByParam,
              pickerId: pickerIdParam,
              pickerPhoneNo: pickerPhoneNoParam,
              helperId: helperIdParam,
              helperPhoneNo: helperPhoneNoParam,
              routeId: routeIdParam,
              mapLink: mapLinkParam,
              createdAt: createdAtParam,
              date: dateParam,
              finalDate: finalDateParam,
              updatedAt: updatedAtParam,
              coordinates: coordinatesParam,
              totalPrice: totalPriceParam,
              totalWeightQuantity: totalWeightQuantityParam,
              completedAt: completedAtParam);
          object.routeModel.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 28, 0);
          object.routeModel.attach(store);
          obx_int.InternalToManyAccess.setRelInfo<Pickup>(
              object.itemsData,
              store,
              obx_int.RelInfo<Item>.toOneBacklink(
                  4, object.obxId, (Item srcObject) => srcObject.pickup));
          return object;
        }),
    Product: obx_int.EntityDefinition<Product>(
        model: _entities[3],
        toOneRelations: (Product object) => [],
        toManyRelations: (Product object) => {},
        getId: (Product object) => object.obxId,
        setId: (Product object, int id) {
          object.obxId = id;
        },
        objectToFB: (Product object, fb.Builder fbb) {
          final idOffset = fbb.writeString(object.id);
          final nameOffset = fbb.writeString(object.name);
          final priceOffset = fbb.writeString(object.price);
          final unitOffset = fbb.writeString(object.unit);
          fbb.startTable(6);
          fbb.addInt64(0, object.obxId);
          fbb.addOffset(1, idOffset);
          fbb.addOffset(2, nameOffset);
          fbb.addOffset(3, priceOffset);
          fbb.addOffset(4, unitOffset);
          fbb.finish(fbb.endTable());
          return object.obxId;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final obxIdParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final idParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final nameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 8, '');
          final priceParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 10, '');
          final unitParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 12, '');
          final object = Product(
              obxId: obxIdParam,
              id: idParam,
              name: nameParam,
              price: priceParam,
              unit: unitParam);

          return object;
        }),
    RouteModel: obx_int.EntityDefinition<RouteModel>(
        model: _entities[4],
        toOneRelations: (RouteModel object) => [],
        toManyRelations: (RouteModel object) => {
              obx_int.RelInfo<Pickup>.toOneBacklink(13, object.obxId,
                      (Pickup srcObject) => srcObject.routeModel):
                  object.pickupsData
            },
        getId: (RouteModel object) => object.obxId,
        setId: (RouteModel object, int id) {
          object.obxId = id;
        },
        objectToFB: (RouteModel object, fb.Builder fbb) {
          final idOffset = fbb.writeString(object.id);
          final nameOffset = fbb.writeString(object.name);
          final mapLinkOffset = fbb.writeString(object.mapLink);
          final morningAssetCheckOffset =
              fbb.writeString(object.morningAssetCheck);
          final eveningAssetCheckOffset =
              fbb.writeString(object.eveningAssetCheck);
          final pickerFirebaseIdOffset =
              fbb.writeString(object.pickerFirebaseId);
          final helperIdOffset = fbb.writeString(object.helperId);
          final pickupIdsOffset = fbb.writeList(
              object.pickupIds.map(fbb.writeString).toList(growable: false));
          fbb.startTable(12);
          fbb.addInt64(0, object.obxId);
          fbb.addOffset(1, idOffset);
          fbb.addOffset(2, nameOffset);
          fbb.addOffset(3, mapLinkOffset);
          fbb.addOffset(4, morningAssetCheckOffset);
          fbb.addOffset(5, eveningAssetCheckOffset);
          fbb.addOffset(6, pickerFirebaseIdOffset);
          fbb.addOffset(7, helperIdOffset);
          fbb.addOffset(8, pickupIdsOffset);
          fbb.addInt64(9, object.scheduledDate.millisecondsSinceEpoch);
          fbb.addInt64(10, object.updatedAt.microsecondsSinceEpoch * 1000);
          fbb.finish(fbb.endTable());
          return object.obxId;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final obxIdParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final idParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final nameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 8, '');
          final morningAssetCheckParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 12, '');
          final eveningAssetCheckParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 14, '');
          final pickerFirebaseIdParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 16, '');
          final helperIdParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 18, '');
          final pickupIdsParam = const fb.ListReader<String>(
                  fb.StringReader(asciiOptimization: true),
                  lazy: false)
              .vTableGet(buffer, rootOffset, 20, []);
          final mapLinkParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 10, '');
          final scheduledDateParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 22, 0));
          final updatedAtParam = DateTime.fromMicrosecondsSinceEpoch(
              (const fb.Int64Reader().vTableGet(buffer, rootOffset, 24, 0) /
                      1000)
                  .round());
          final object = RouteModel(
              obxId: obxIdParam,
              id: idParam,
              name: nameParam,
              morningAssetCheck: morningAssetCheckParam,
              eveningAssetCheck: eveningAssetCheckParam,
              pickerFirebaseId: pickerFirebaseIdParam,
              helperId: helperIdParam,
              pickupIds: pickupIdsParam,
              mapLink: mapLinkParam,
              scheduledDate: scheduledDateParam,
              updatedAt: updatedAtParam);
          obx_int.InternalToManyAccess.setRelInfo<RouteModel>(
              object.pickupsData,
              store,
              obx_int.RelInfo<Pickup>.toOneBacklink(13, object.obxId,
                  (Pickup srcObject) => srcObject.routeModel));
          return object;
        })
  };

  return obx_int.ModelDefinition(model, bindings);
}

/// [Item] entity fields to define ObjectBox queries.
class Item_ {
  /// See [Item.obxId].
  static final obxId =
      obx.QueryIntegerProperty<Item>(_entities[0].properties[0]);

  /// See [Item.id].
  static final id = obx.QueryStringProperty<Item>(_entities[0].properties[1]);

  /// See [Item.productRef].
  static final productRef =
      obx.QueryRelationToOne<Item, Product>(_entities[0].properties[2]);

  /// See [Item.pickup].
  static final pickup =
      obx.QueryRelationToOne<Item, Pickup>(_entities[0].properties[3]);

  /// See [Item.createdAt].
  static final createdAt =
      obx.QueryDateProperty<Item>(_entities[0].properties[4]);

  /// See [Item.localImagePaths].
  static final localImagePaths =
      obx.QueryStringVectorProperty<Item>(_entities[0].properties[5]);

  /// See [Item.imageUrls].
  static final imageUrls =
      obx.QueryStringVectorProperty<Item>(_entities[0].properties[6]);

  /// See [Item.isUploaded].
  static final isUploaded =
      obx.QueryBooleanProperty<Item>(_entities[0].properties[7]);

  /// See [Item.totalPrice].
  static final totalPrice =
      obx.QueryDoubleProperty<Item>(_entities[0].properties[8]);

  /// See [Item.customPrice].
  static final customPrice =
      obx.QueryDoubleProperty<Item>(_entities[0].properties[9]);

  /// See [Item.weight].
  static final weight =
      obx.QueryDoubleProperty<Item>(_entities[0].properties[10]);

  /// See [Item.quantity].
  static final quantity =
      obx.QueryDoubleProperty<Item>(_entities[0].properties[11]);

  /// See [Item.coordinates].
  static final coordinates =
      obx.QueryStringVectorProperty<Item>(_entities[0].properties[12]);
}

/// [Picker] entity fields to define ObjectBox queries.
class Picker_ {
  /// See [Picker.obxId].
  static final obxId =
      obx.QueryIntegerProperty<Picker>(_entities[1].properties[0]);

  /// See [Picker.id].
  static final id = obx.QueryStringProperty<Picker>(_entities[1].properties[1]);

  /// See [Picker.name].
  static final name =
      obx.QueryStringProperty<Picker>(_entities[1].properties[2]);

  /// See [Picker.email].
  static final email =
      obx.QueryStringProperty<Picker>(_entities[1].properties[3]);

  /// See [Picker.licenseNo].
  static final licenseNo =
      obx.QueryStringProperty<Picker>(_entities[1].properties[4]);

  /// See [Picker.phoneNo].
  static final phoneNo =
      obx.QueryStringProperty<Picker>(_entities[1].properties[5]);

  /// See [Picker.isAvailable].
  static final isAvailable =
      obx.QueryBooleanProperty<Picker>(_entities[1].properties[6]);

  /// See [Picker.isDriver].
  static final isDriver =
      obx.QueryBooleanProperty<Picker>(_entities[1].properties[7]);

  /// See [Picker.isHelper].
  static final isHelper =
      obx.QueryBooleanProperty<Picker>(_entities[1].properties[8]);

  /// See [Picker.isOnLeave].
  static final isOnLeave =
      obx.QueryBooleanProperty<Picker>(_entities[1].properties[9]);

  /// See [Picker.isPicker].
  static final isPicker =
      obx.QueryBooleanProperty<Picker>(_entities[1].properties[10]);

  /// See [Picker.isWorking].
  static final isWorking =
      obx.QueryBooleanProperty<Picker>(_entities[1].properties[11]);

  /// See [Picker.routeName].
  static final routeName =
      obx.QueryStringProperty<Picker>(_entities[1].properties[12]);

  /// See [Picker.assignedVehicleId].
  static final assignedVehicleId =
      obx.QueryStringProperty<Picker>(_entities[1].properties[13]);

  /// See [Picker.assignedVehicleName].
  static final assignedVehicleName =
      obx.QueryStringProperty<Picker>(_entities[1].properties[14]);
}

/// [Pickup] entity fields to define ObjectBox queries.
class Pickup_ {
  /// See [Pickup.obxId].
  static final obxId =
      obx.QueryIntegerProperty<Pickup>(_entities[2].properties[0]);

  /// See [Pickup.id].
  static final id = obx.QueryStringProperty<Pickup>(_entities[2].properties[1]);

  /// See [Pickup.firebaseIndex].
  static final firebaseIndex =
      obx.QueryIntegerProperty<Pickup>(_entities[2].properties[2]);

  /// See [Pickup.name].
  static final name =
      obx.QueryStringProperty<Pickup>(_entities[2].properties[3]);

  /// See [Pickup.mobileNo].
  static final mobileNo =
      obx.QueryStringProperty<Pickup>(_entities[2].properties[4]);

  /// See [Pickup.address].
  static final address =
      obx.QueryStringProperty<Pickup>(_entities[2].properties[5]);

  /// See [Pickup.area].
  static final area =
      obx.QueryStringProperty<Pickup>(_entities[2].properties[6]);

  /// See [Pickup.pincode].
  static final pincode =
      obx.QueryStringProperty<Pickup>(_entities[2].properties[7]);

  /// See [Pickup.aov].
  static final aov =
      obx.QueryStringProperty<Pickup>(_entities[2].properties[8]);

  /// See [Pickup.description].
  static final description =
      obx.QueryStringProperty<Pickup>(_entities[2].properties[9]);

  /// See [Pickup.expectedWeight].
  static final expectedWeight =
      obx.QueryStringProperty<Pickup>(_entities[2].properties[10]);

  /// See [Pickup.items].
  static final items =
      obx.QueryStringVectorProperty<Pickup>(_entities[2].properties[11]);

  /// See [Pickup.routeModel].
  static final routeModel =
      obx.QueryRelationToOne<Pickup, RouteModel>(_entities[2].properties[12]);

  /// See [Pickup.slot].
  static final slot =
      obx.QueryStringProperty<Pickup>(_entities[2].properties[13]);

  /// See [Pickup.finalSlot].
  static final finalSlot =
      obx.QueryStringProperty<Pickup>(_entities[2].properties[14]);

  /// See [Pickup.status].
  static final status =
      obx.QueryStringProperty<Pickup>(_entities[2].properties[15]);

  /// See [Pickup.subStatus].
  static final subStatus =
      obx.QueryStringProperty<Pickup>(_entities[2].properties[16]);

  /// See [Pickup.isCompleted].
  static final isCompleted =
      obx.QueryBooleanProperty<Pickup>(_entities[2].properties[17]);

  /// See [Pickup.isLocked].
  static final isLocked =
      obx.QueryBooleanProperty<Pickup>(_entities[2].properties[18]);

  /// See [Pickup.lockedBy].
  static final lockedBy =
      obx.QueryStringProperty<Pickup>(_entities[2].properties[19]);

  /// See [Pickup.pickerId].
  static final pickerId =
      obx.QueryStringProperty<Pickup>(_entities[2].properties[20]);

  /// See [Pickup.pickerPhoneNo].
  static final pickerPhoneNo =
      obx.QueryStringProperty<Pickup>(_entities[2].properties[21]);

  /// See [Pickup.helperId].
  static final helperId =
      obx.QueryStringProperty<Pickup>(_entities[2].properties[22]);

  /// See [Pickup.helperPhoneNo].
  static final helperPhoneNo =
      obx.QueryStringProperty<Pickup>(_entities[2].properties[23]);

  /// See [Pickup.routeId].
  static final routeId =
      obx.QueryStringProperty<Pickup>(_entities[2].properties[24]);

  /// See [Pickup.mapLink].
  static final mapLink =
      obx.QueryStringProperty<Pickup>(_entities[2].properties[25]);

  /// See [Pickup.coordinates].
  static final coordinates =
      obx.QueryStringVectorProperty<Pickup>(_entities[2].properties[26]);

  /// See [Pickup.totalPrice].
  static final totalPrice =
      obx.QueryDoubleProperty<Pickup>(_entities[2].properties[27]);

  /// See [Pickup.totalWeightQuantity].
  static final totalWeightQuantity =
      obx.QueryDoubleProperty<Pickup>(_entities[2].properties[28]);

  /// See [Pickup.createdAt].
  static final createdAt =
      obx.QueryDateProperty<Pickup>(_entities[2].properties[29]);

  /// See [Pickup.date].
  static final date =
      obx.QueryDateProperty<Pickup>(_entities[2].properties[30]);

  /// See [Pickup.finalDate].
  static final finalDate =
      obx.QueryDateProperty<Pickup>(_entities[2].properties[31]);

  /// See [Pickup.updatedAt].
  static final updatedAt =
      obx.QueryDateNanoProperty<Pickup>(_entities[2].properties[32]);

  /// See [Pickup.completedAt].
  static final completedAt =
      obx.QueryDateNanoProperty<Pickup>(_entities[2].properties[33]);

  /// see [Pickup.itemsData]
  static final itemsData = obx.QueryBacklinkToMany<Item, Pickup>(Item_.pickup);
}

/// [Product] entity fields to define ObjectBox queries.
class Product_ {
  /// See [Product.obxId].
  static final obxId =
      obx.QueryIntegerProperty<Product>(_entities[3].properties[0]);

  /// See [Product.id].
  static final id =
      obx.QueryStringProperty<Product>(_entities[3].properties[1]);

  /// See [Product.name].
  static final name =
      obx.QueryStringProperty<Product>(_entities[3].properties[2]);

  /// See [Product.price].
  static final price =
      obx.QueryStringProperty<Product>(_entities[3].properties[3]);

  /// See [Product.unit].
  static final unit =
      obx.QueryStringProperty<Product>(_entities[3].properties[4]);
}

/// [RouteModel] entity fields to define ObjectBox queries.
class RouteModel_ {
  /// See [RouteModel.obxId].
  static final obxId =
      obx.QueryIntegerProperty<RouteModel>(_entities[4].properties[0]);

  /// See [RouteModel.id].
  static final id =
      obx.QueryStringProperty<RouteModel>(_entities[4].properties[1]);

  /// See [RouteModel.name].
  static final name =
      obx.QueryStringProperty<RouteModel>(_entities[4].properties[2]);

  /// See [RouteModel.mapLink].
  static final mapLink =
      obx.QueryStringProperty<RouteModel>(_entities[4].properties[3]);

  /// See [RouteModel.morningAssetCheck].
  static final morningAssetCheck =
      obx.QueryStringProperty<RouteModel>(_entities[4].properties[4]);

  /// See [RouteModel.eveningAssetCheck].
  static final eveningAssetCheck =
      obx.QueryStringProperty<RouteModel>(_entities[4].properties[5]);

  /// See [RouteModel.pickerFirebaseId].
  static final pickerFirebaseId =
      obx.QueryStringProperty<RouteModel>(_entities[4].properties[6]);

  /// See [RouteModel.helperId].
  static final helperId =
      obx.QueryStringProperty<RouteModel>(_entities[4].properties[7]);

  /// See [RouteModel.pickupIds].
  static final pickupIds =
      obx.QueryStringVectorProperty<RouteModel>(_entities[4].properties[8]);

  /// See [RouteModel.scheduledDate].
  static final scheduledDate =
      obx.QueryDateProperty<RouteModel>(_entities[4].properties[9]);

  /// See [RouteModel.updatedAt].
  static final updatedAt =
      obx.QueryDateNanoProperty<RouteModel>(_entities[4].properties[10]);

  /// see [RouteModel.pickupsData]
  static final pickupsData =
      obx.QueryBacklinkToMany<Pickup, RouteModel>(Pickup_.routeModel);
}
