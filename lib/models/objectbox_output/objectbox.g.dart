// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again
// with `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types, depend_on_referenced_packages
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'
    as obx_int; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart' as obx;
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import '../../models/app_sync_status.entity.dart';
import '../../models/item.entity.dart';
import '../../models/local_pickup.entity.dart';
import '../../models/logger.entity.dart';
import '../../models/notification.entity.dart';
import '../../models/picker.entity.dart';
import '../../models/pickup.entity.dart';
import '../../models/product.entity.dart';
import '../../models/route.entity.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <obx_int.ModelEntity>[
  obx_int.ModelEntity(
      id: const obx_int.IdUid(1, 4570125580093388145),
      name: 'Item',
      lastPropertyId: const obx_int.IdUid(14, 5482854290382446053),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 4834199348074821852),
            name: 'obxId',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 4564182539173056426),
            name: 'id',
            type: 9,
            flags: 34848,
            indexId: const obx_int.IdUid(1, 858828403047650560)),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 6823215686690661785),
            name: 'productRefId',
            type: 11,
            flags: 520,
            indexId: const obx_int.IdUid(2, 7217016809067976196),
            relationTarget: 'Product'),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 5019967749574540972),
            name: 'pickupId',
            type: 11,
            flags: 520,
            indexId: const obx_int.IdUid(3, 7291981338556090316),
            relationTarget: 'Pickup'),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 1891436775849858800),
            name: 'localPickupId',
            type: 11,
            flags: 520,
            indexId: const obx_int.IdUid(4, 2372636426224627525),
            relationTarget: 'LocalPickup'),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 2706675219946025974),
            name: 'createdAt',
            type: 10,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 6780602745878228254),
            name: 'localImagePaths',
            type: 30,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(8, 5545702011399909067),
            name: 'imageUrls',
            type: 30,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(9, 5336466497187886845),
            name: 'isUploaded',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(10, 9112865603754840831),
            name: 'totalPrice',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(11, 1825480867891276484),
            name: 'customPrice',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(12, 1732561672431532138),
            name: 'weight',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(13, 6031420256134307790),
            name: 'quantity',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(14, 5482854290382446053),
            name: 'coordinates',
            type: 30,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(2, 8278728251566371963),
      name: 'LocalPickup',
      lastPropertyId: const obx_int.IdUid(36, 6406768489324350763),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 639153100716282040),
            name: 'obxId',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 5605810412354680849),
            name: 'id',
            type: 9,
            flags: 34848,
            indexId: const obx_int.IdUid(5, 6674570477959139874)),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 673856346182473478),
            name: 'pickupId',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 3123770857282149900),
            name: 'firebaseIndex',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 7037702546428772951),
            name: 'name',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 7578789988771824439),
            name: 'mobileNo',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 2154523629049975595),
            name: 'address',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(8, 7577068974342583893),
            name: 'area',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(9, 6568421061610677126),
            name: 'pincode',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(10, 2154568649775736151),
            name: 'aov',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(11, 8962928734596156289),
            name: 'description',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(12, 4962412626599831301),
            name: 'expectedWeight',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(13, 1906156159326090720),
            name: 'items',
            type: 30,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(14, 573587864740681288),
            name: 'routeModelId',
            type: 11,
            flags: 520,
            indexId: const obx_int.IdUid(6, 6662427134248727471),
            relationTarget: 'RouteModel'),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(15, 2770898252548539620),
            name: 'slot',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(16, 460678811902555147),
            name: 'finalSlot',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(17, 5222919819700187275),
            name: 'status',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(18, 407138152193367695),
            name: 'subStatus',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(19, 1391639757692302566),
            name: 'isCompleted',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(20, 3180039156844432085),
            name: 'isLocked',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(21, 5003532615938606435),
            name: 'lockedBy',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(22, 61653976438182543),
            name: 'pickerId',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(23, 9171708579237362091),
            name: 'pickerPhoneNo',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(24, 1805969411797838477),
            name: 'helperId',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(25, 2378490298216815334),
            name: 'helperPhoneNo',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(26, 814622934394026570),
            name: 'routeId',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(27, 6146830235871570563),
            name: 'mapLink',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(28, 1325613312146484900),
            name: 'coordinates',
            type: 30,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(29, 5886608083693935788),
            name: 'totalPrice',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(30, 6354674900464728140),
            name: 'totalWeightQuantity',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(31, 7714598288336763789),
            name: 'createdAt',
            type: 10,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(32, 8139488103309243131),
            name: 'date',
            type: 10,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(33, 3203653128900693434),
            name: 'finalDate',
            type: 10,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(34, 2224325611477737702),
            name: 'updatedAt',
            type: 12,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(35, 7391822544537818726),
            name: 'completedAt',
            type: 12,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(36, 6406768489324350763),
            name: 'isUpdated',
            type: 1,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[
        obx_int.ModelBacklink(
            name: 'itemsData', srcEntity: 'Item', srcField: 'localPickup')
      ]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(3, 245794945070651209),
      name: 'Logger',
      lastPropertyId: const obx_int.IdUid(3, 3538088023400599376),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 1467376957846181251),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 4563261196093730606),
            name: 'statusIndex',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 3538088023400599376),
            name: 'message',
            type: 9,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(4, 7185711272601369911),
      name: 'NotificationEntity',
      lastPropertyId: const obx_int.IdUid(11, 9190327027869719851),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 8511536302152174553),
            name: 'obxId',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 8564675643183226633),
            name: 'id',
            type: 9,
            flags: 34848,
            indexId: const obx_int.IdUid(7, 4399592989695103154)),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 869784222299754292),
            name: 'details',
            type: 30,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 4519922515597730571),
            name: 'imageUrl',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 4546314991490019631),
            name: 'isRead',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 8288018244907698279),
            name: 'message',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 8076046467390447599),
            name: 'targetSupervisor',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(8, 7381140364850668730),
            name: 'targetScreen',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(9, 1818152113158038552),
            name: 'timestamp',
            type: 12,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(10, 7172571562816118763),
            name: 'title',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(11, 9190327027869719851),
            name: 'isSynced',
            type: 1,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(5, 2286385200778026665),
      name: 'Picker',
      lastPropertyId: const obx_int.IdUid(15, 6884300873839586080),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 8481283761780326653),
            name: 'obxId',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 219893483048537019),
            name: 'id',
            type: 9,
            flags: 34848,
            indexId: const obx_int.IdUid(8, 7047963669355875221)),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 8499344321296571772),
            name: 'name',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 2831552494493979926),
            name: 'email',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 5792891305970151584),
            name: 'licenseNo',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 610823317505797503),
            name: 'phoneNo',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 8612832000305199579),
            name: 'isAvailable',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(8, 3471659786547040586),
            name: 'isDriver',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(9, 1698004293518117881),
            name: 'isHelper',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(10, 8345018379543432961),
            name: 'isOnLeave',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(11, 5000398293594305630),
            name: 'isPicker',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(12, 298427234040051455),
            name: 'isWorking',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(13, 8495408253103368792),
            name: 'routeName',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(14, 7744231757494224080),
            name: 'assignedVehicleId',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(15, 6884300873839586080),
            name: 'assignedVehicleName',
            type: 9,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(6, 3636317275695244773),
      name: 'Pickup',
      lastPropertyId: const obx_int.IdUid(36, 6885916690713571538),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 6774251426387476695),
            name: 'obxId',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 4706910950792823308),
            name: 'id',
            type: 9,
            flags: 34848,
            indexId: const obx_int.IdUid(9, 553401588463732829)),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 7890732527210805322),
            name: 'pickupId',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 8628487567031505362),
            name: 'firebaseIndex',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 2077777550365535166),
            name: 'name',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 4632129665655079052),
            name: 'mobileNo',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 6307487326172200793),
            name: 'address',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(8, 2124450885027597110),
            name: 'area',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(9, 8350871104036042150),
            name: 'pincode',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(10, 7236685695225780589),
            name: 'aov',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(11, 1132663818123599662),
            name: 'description',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(12, 8266031301981044136),
            name: 'expectedWeight',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(13, 22524853031778029),
            name: 'items',
            type: 30,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(14, 4134672250002766596),
            name: 'routeModelId',
            type: 11,
            flags: 520,
            indexId: const obx_int.IdUid(10, 1639169525124813003),
            relationTarget: 'RouteModel'),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(15, 2312650116269329669),
            name: 'slot',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(16, 347789101169566628),
            name: 'finalSlot',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(17, 9046560858109147330),
            name: 'status',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(18, 5653355063128493662),
            name: 'subStatus',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(19, 748902514691012253),
            name: 'isCompleted',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(20, 5227608053150353660),
            name: 'isLocked',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(21, 3454815354567498025),
            name: 'lockedBy',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(22, 1138820949378598577),
            name: 'pickerId',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(23, 7878644358336731385),
            name: 'pickerPhoneNo',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(24, 5205568749213566442),
            name: 'helperId',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(25, 2895634025091682215),
            name: 'helperPhoneNo',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(26, 7935496734322712771),
            name: 'routeId',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(27, 8740223956194784776),
            name: 'mapLink',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(28, 4700443181729594693),
            name: 'coordinates',
            type: 30,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(29, 2284563105889996118),
            name: 'totalPrice',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(30, 8645479782962184251),
            name: 'totalWeightQuantity',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(31, 2663161740271689920),
            name: 'createdAt',
            type: 10,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(32, 802077682151662055),
            name: 'date',
            type: 10,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(33, 3195548902650714587),
            name: 'finalDate',
            type: 10,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(34, 5145160857876423851),
            name: 'updatedAt',
            type: 12,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(35, 7885451645521006250),
            name: 'completedAt',
            type: 12,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(36, 6885916690713571538),
            name: 'isUpdated',
            type: 1,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[
        obx_int.ModelBacklink(
            name: 'itemsData', srcEntity: 'Item', srcField: 'pickup')
      ]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(7, 5397539288945813056),
      name: 'Product',
      lastPropertyId: const obx_int.IdUid(5, 1777589497184299008),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 578055660357675746),
            name: 'obxId',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 5784124736549796965),
            name: 'id',
            type: 9,
            flags: 34848,
            indexId: const obx_int.IdUid(11, 6255871686306209661)),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 6898227914384071946),
            name: 'name',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 3150055134699471862),
            name: 'price',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 1777589497184299008),
            name: 'unit',
            type: 9,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(8, 2870844657184697681),
      name: 'RouteModel',
      lastPropertyId: const obx_int.IdUid(13, 9092539818997472554),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 7628284383995718552),
            name: 'obxId',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 1281995091067215548),
            name: 'id',
            type: 9,
            flags: 34848,
            indexId: const obx_int.IdUid(12, 5187941493426763591)),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 4894881017416493561),
            name: 'name',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 9132827523426852229),
            name: 'mapLink',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 5265298510665739909),
            name: 'morningAssetCheck',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 98122623039804478),
            name: 'eveningAssetCheck',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 1255928749349817567),
            name: 'morningSupervisor',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(8, 1542255148966547316),
            name: 'eveningSupervisor',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(9, 1479593647093228193),
            name: 'pickerFirebaseId',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(10, 7754248657774544872),
            name: 'helperId',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(11, 6042406823285640548),
            name: 'pickupIds',
            type: 30,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(12, 6610857779757341074),
            name: 'scheduledDate',
            type: 10,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(13, 9092539818997472554),
            name: 'updatedAt',
            type: 12,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[
        obx_int.ModelBacklink(
            name: 'pickupsData', srcEntity: 'Pickup', srcField: 'routeModel')
      ]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(9, 2108070671142245570),
      name: 'SyncStatus',
      lastPropertyId: const obx_int.IdUid(4, 7762082925506263645),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 5201358638020778385),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 7211350227843957283),
            name: 'isSyncing',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 2484878458239000060),
            name: 'isSynced',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 7762082925506263645),
            name: 'lastSyncTime',
            type: 12,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[])
];

/// Shortcut for [obx.Store.new] that passes [getObjectBoxModel] and for Flutter
/// apps by default a [directory] using `defaultStoreDirectory()` from the
/// ObjectBox Flutter library.
///
/// Note: for desktop apps it is recommended to specify a unique [directory].
///
/// See [obx.Store.new] for an explanation of all parameters.
///
/// For Flutter apps, also calls `loadObjectBoxLibraryAndroidCompat()` from
/// the ObjectBox Flutter library to fix loading the native ObjectBox library
/// on Android 6 and older.
Future<obx.Store> openStore(
    {String? directory,
    int? maxDBSizeInKB,
    int? maxDataSizeInKB,
    int? fileMode,
    int? maxReaders,
    bool queriesCaseSensitiveDefault = true,
    String? macosApplicationGroup}) async {
  await loadObjectBoxLibraryAndroidCompat();
  return obx.Store(getObjectBoxModel(),
      directory: directory ?? (await defaultStoreDirectory()).path,
      maxDBSizeInKB: maxDBSizeInKB,
      maxDataSizeInKB: maxDataSizeInKB,
      fileMode: fileMode,
      maxReaders: maxReaders,
      queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
      macosApplicationGroup: macosApplicationGroup);
}

/// Returns the ObjectBox model definition for this project for use with
/// [obx.Store.new].
obx_int.ModelDefinition getObjectBoxModel() {
  final model = obx_int.ModelInfo(
      entities: _entities,
      lastEntityId: const obx_int.IdUid(9, 2108070671142245570),
      lastIndexId: const obx_int.IdUid(12, 5187941493426763591),
      lastRelationId: const obx_int.IdUid(0, 0),
      lastSequenceId: const obx_int.IdUid(0, 0),
      retiredEntityUids: const [],
      retiredIndexUids: const [],
      retiredPropertyUids: const [],
      retiredRelationUids: const [],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, obx_int.EntityDefinition>{
    Item: obx_int.EntityDefinition<Item>(
        model: _entities[0],
        toOneRelations: (Item object) =>
            [object.productRef, object.pickup, object.localPickup],
        toManyRelations: (Item object) => {},
        getId: (Item object) => object.obxId,
        setId: (Item object, int id) {
          object.obxId = id;
        },
        objectToFB: (Item object, fb.Builder fbb) {
          final idOffset = fbb.writeString(object.id);
          final localImagePathsOffset = object.localImagePaths == null
              ? null
              : fbb.writeList(object.localImagePaths!
                  .map(fbb.writeString)
                  .toList(growable: false));
          final imageUrlsOffset = object.imageUrls == null
              ? null
              : fbb.writeList(object.imageUrls!
                  .map(fbb.writeString)
                  .toList(growable: false));
          final coordinatesOffset = fbb.writeList(
              object.coordinates.map(fbb.writeString).toList(growable: false));
          fbb.startTable(15);
          fbb.addInt64(0, object.obxId);
          fbb.addOffset(1, idOffset);
          fbb.addInt64(2, object.productRef.targetId);
          fbb.addInt64(3, object.pickup.targetId);
          fbb.addInt64(4, object.localPickup.targetId);
          fbb.addInt64(5, object.createdAt.millisecondsSinceEpoch);
          fbb.addOffset(6, localImagePathsOffset);
          fbb.addOffset(7, imageUrlsOffset);
          fbb.addBool(8, object.isUploaded);
          fbb.addFloat64(9, object.totalPrice);
          fbb.addFloat64(10, object.customPrice);
          fbb.addFloat64(11, object.weight);
          fbb.addFloat64(12, object.quantity);
          fbb.addOffset(13, coordinatesOffset);
          fbb.finish(fbb.endTable());
          return object.obxId;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final obxIdParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final idParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final createdAtParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 14, 0));
          final customPriceParam = const fb.Float64Reader()
              .vTableGetNullable(buffer, rootOffset, 24);
          final isUploadedParam =
              const fb.BoolReader().vTableGet(buffer, rootOffset, 20, false);
          final localImagePathsParam = const fb.ListReader<String>(
                  fb.StringReader(asciiOptimization: true),
                  lazy: false)
              .vTableGetNullable(buffer, rootOffset, 16);
          final imageUrlsParam = const fb.ListReader<String>(
                  fb.StringReader(asciiOptimization: true),
                  lazy: false)
              .vTableGetNullable(buffer, rootOffset, 18);
          final totalPriceParam =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 22, 0);
          final weightParam =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 26, 0);
          final quantityParam =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 28, 0);
          final coordinatesParam = const fb.ListReader<String>(
                  fb.StringReader(asciiOptimization: true),
                  lazy: false)
              .vTableGet(buffer, rootOffset, 30, []);
          final object = Item(
              obxId: obxIdParam,
              id: idParam,
              createdAt: createdAtParam,
              customPrice: customPriceParam,
              isUploaded: isUploadedParam,
              localImagePaths: localImagePathsParam,
              imageUrls: imageUrlsParam,
              totalPrice: totalPriceParam,
              weight: weightParam,
              quantity: quantityParam,
              coordinates: coordinatesParam);
          object.productRef.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0);
          object.productRef.attach(store);
          object.pickup.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 10, 0);
          object.pickup.attach(store);
          object.localPickup.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 12, 0);
          object.localPickup.attach(store);
          return object;
        }),
    LocalPickup: obx_int.EntityDefinition<LocalPickup>(
        model: _entities[1],
        toOneRelations: (LocalPickup object) => [object.routeModel],
        toManyRelations: (LocalPickup object) => {
              obx_int.RelInfo<Item>.toOneBacklink(5, object.obxId,
                  (Item srcObject) => srcObject.localPickup): object.itemsData
            },
        getId: (LocalPickup object) => object.obxId,
        setId: (LocalPickup object, int id) {
          object.obxId = id;
        },
        objectToFB: (LocalPickup object, fb.Builder fbb) {
          final idOffset = fbb.writeString(object.id);
          final pickupIdOffset = fbb.writeString(object.pickupId);
          final nameOffset = fbb.writeString(object.name);
          final mobileNoOffset = fbb.writeString(object.mobileNo);
          final addressOffset = fbb.writeString(object.address);
          final areaOffset = fbb.writeString(object.area);
          final pincodeOffset = fbb.writeString(object.pincode);
          final aovOffset = fbb.writeString(object.aov);
          final descriptionOffset = fbb.writeString(object.description);
          final expectedWeightOffset = fbb.writeString(object.expectedWeight);
          final itemsOffset = fbb.writeList(
              object.items.map(fbb.writeString).toList(growable: false));
          final slotOffset = fbb.writeString(object.slot);
          final finalSlotOffset = fbb.writeString(object.finalSlot);
          final statusOffset = fbb.writeString(object.status);
          final subStatusOffset = fbb.writeString(object.subStatus);
          final lockedByOffset = fbb.writeString(object.lockedBy);
          final pickerIdOffset = fbb.writeString(object.pickerId);
          final pickerPhoneNoOffset = fbb.writeString(object.pickerPhoneNo);
          final helperIdOffset = fbb.writeString(object.helperId);
          final helperPhoneNoOffset = fbb.writeString(object.helperPhoneNo);
          final routeIdOffset = fbb.writeString(object.routeId);
          final mapLinkOffset = fbb.writeString(object.mapLink);
          final coordinatesOffset = fbb.writeList(
              object.coordinates.map(fbb.writeString).toList(growable: false));
          fbb.startTable(37);
          fbb.addInt64(0, object.obxId);
          fbb.addOffset(1, idOffset);
          fbb.addOffset(2, pickupIdOffset);
          fbb.addInt64(3, object.firebaseIndex);
          fbb.addOffset(4, nameOffset);
          fbb.addOffset(5, mobileNoOffset);
          fbb.addOffset(6, addressOffset);
          fbb.addOffset(7, areaOffset);
          fbb.addOffset(8, pincodeOffset);
          fbb.addOffset(9, aovOffset);
          fbb.addOffset(10, descriptionOffset);
          fbb.addOffset(11, expectedWeightOffset);
          fbb.addOffset(12, itemsOffset);
          fbb.addInt64(13, object.routeModel.targetId);
          fbb.addOffset(14, slotOffset);
          fbb.addOffset(15, finalSlotOffset);
          fbb.addOffset(16, statusOffset);
          fbb.addOffset(17, subStatusOffset);
          fbb.addBool(18, object.isCompleted);
          fbb.addBool(19, object.isLocked);
          fbb.addOffset(20, lockedByOffset);
          fbb.addOffset(21, pickerIdOffset);
          fbb.addOffset(22, pickerPhoneNoOffset);
          fbb.addOffset(23, helperIdOffset);
          fbb.addOffset(24, helperPhoneNoOffset);
          fbb.addOffset(25, routeIdOffset);
          fbb.addOffset(26, mapLinkOffset);
          fbb.addOffset(27, coordinatesOffset);
          fbb.addFloat64(28, object.totalPrice);
          fbb.addFloat64(29, object.totalWeightQuantity);
          fbb.addInt64(30, object.createdAt.millisecondsSinceEpoch);
          fbb.addInt64(31, object.date.millisecondsSinceEpoch);
          fbb.addInt64(32, object.finalDate.millisecondsSinceEpoch);
          fbb.addInt64(
              33,
              object.updatedAt == null
                  ? null
                  : object.updatedAt!.microsecondsSinceEpoch * 1000);
          fbb.addInt64(
              34,
              object.completedAt == null
                  ? null
                  : object.completedAt!.microsecondsSinceEpoch * 1000);
          fbb.addBool(35, object.isUpdated);
          fbb.finish(fbb.endTable());
          return object.obxId;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final updatedAtValue =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 70);
          final completedAtValue =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 72);
          final obxIdParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final idParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final pickupIdParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 8, '');
          final firebaseIndexParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 10, 0);
          final nameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 12, '');
          final mobileNoParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 14, '');
          final addressParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 16, '');
          final areaParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 18, '');
          final pincodeParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 20, '');
          final aovParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 22, '');
          final descriptionParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 24, '');
          final expectedWeightParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 26, '');
          final itemsParam = const fb.ListReader<String>(
                  fb.StringReader(asciiOptimization: true),
                  lazy: false)
              .vTableGet(buffer, rootOffset, 28, []);
          final slotParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 32, '');
          final finalSlotParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 34, '');
          final statusParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 36, '');
          final subStatusParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 38, '');
          final isCompletedParam =
              const fb.BoolReader().vTableGet(buffer, rootOffset, 40, false);
          final isLockedParam =
              const fb.BoolReader().vTableGet(buffer, rootOffset, 42, false);
          final lockedByParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 44, '');
          final pickerIdParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 46, '');
          final pickerPhoneNoParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 48, '');
          final helperIdParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 50, '');
          final helperPhoneNoParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 52, '');
          final routeIdParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 54, '');
          final mapLinkParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 56, '');
          final createdAtParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 64, 0));
          final dateParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 66, 0));
          final finalDateParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 68, 0));
          final updatedAtParam = updatedAtValue == null
              ? null
              : DateTime.fromMicrosecondsSinceEpoch(
                  (updatedAtValue / 1000).round());
          final coordinatesParam = const fb.ListReader<String>(
                  fb.StringReader(asciiOptimization: true),
                  lazy: false)
              .vTableGet(buffer, rootOffset, 58, []);
          final totalPriceParam =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 60, 0);
          final totalWeightQuantityParam =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 62, 0);
          final completedAtParam = completedAtValue == null
              ? null
              : DateTime.fromMicrosecondsSinceEpoch(
                  (completedAtValue / 1000).round());
          final isUpdatedParam =
              const fb.BoolReader().vTableGet(buffer, rootOffset, 74, false);
          final object = LocalPickup(
              obxId: obxIdParam,
              id: idParam,
              pickupId: pickupIdParam,
              firebaseIndex: firebaseIndexParam,
              name: nameParam,
              mobileNo: mobileNoParam,
              address: addressParam,
              area: areaParam,
              pincode: pincodeParam,
              aov: aovParam,
              description: descriptionParam,
              expectedWeight: expectedWeightParam,
              items: itemsParam,
              slot: slotParam,
              finalSlot: finalSlotParam,
              status: statusParam,
              subStatus: subStatusParam,
              isCompleted: isCompletedParam,
              isLocked: isLockedParam,
              lockedBy: lockedByParam,
              pickerId: pickerIdParam,
              pickerPhoneNo: pickerPhoneNoParam,
              helperId: helperIdParam,
              helperPhoneNo: helperPhoneNoParam,
              routeId: routeIdParam,
              mapLink: mapLinkParam,
              createdAt: createdAtParam,
              date: dateParam,
              finalDate: finalDateParam,
              updatedAt: updatedAtParam,
              coordinates: coordinatesParam,
              totalPrice: totalPriceParam,
              totalWeightQuantity: totalWeightQuantityParam,
              completedAt: completedAtParam,
              isUpdated: isUpdatedParam);
          object.routeModel.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 30, 0);
          object.routeModel.attach(store);
          obx_int.InternalToManyAccess.setRelInfo<LocalPickup>(
              object.itemsData,
              store,
              obx_int.RelInfo<Item>.toOneBacklink(
                  5, object.obxId, (Item srcObject) => srcObject.localPickup));
          return object;
        }),
    Logger: obx_int.EntityDefinition<Logger>(
        model: _entities[2],
        toOneRelations: (Logger object) => [],
        toManyRelations: (Logger object) => {},
        getId: (Logger object) => object.id,
        setId: (Logger object, int id) {
          object.id = id;
        },
        objectToFB: (Logger object, fb.Builder fbb) {
          final messageOffset =
              object.message == null ? null : fbb.writeString(object.message!);
          fbb.startTable(4);
          fbb.addInt64(0, object.id);
          fbb.addInt64(1, object.statusIndex);
          fbb.addOffset(2, messageOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final messageParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 8);
          final object = Logger(id: idParam, message: messageParam)
            ..statusIndex =
                const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 6);

          return object;
        }),
    NotificationEntity: obx_int.EntityDefinition<NotificationEntity>(
        model: _entities[3],
        toOneRelations: (NotificationEntity object) => [],
        toManyRelations: (NotificationEntity object) => {},
        getId: (NotificationEntity object) => object.obxId,
        setId: (NotificationEntity object, int id) {
          object.obxId = id;
        },
        objectToFB: (NotificationEntity object, fb.Builder fbb) {
          final idOffset = fbb.writeString(object.id);
          final detailsOffset = fbb.writeList(
              object.details.map(fbb.writeString).toList(growable: false));
          final imageUrlOffset = object.imageUrl == null
              ? null
              : fbb.writeString(object.imageUrl!);
          final messageOffset = fbb.writeString(object.message);
          final targetSupervisorOffset =
              fbb.writeString(object.targetSupervisor);
          final targetScreenOffset = object.targetScreen == null
              ? null
              : fbb.writeString(object.targetScreen!);
          final titleOffset = fbb.writeString(object.title);
          fbb.startTable(12);
          fbb.addInt64(0, object.obxId);
          fbb.addOffset(1, idOffset);
          fbb.addOffset(2, detailsOffset);
          fbb.addOffset(3, imageUrlOffset);
          fbb.addBool(4, object.isRead);
          fbb.addOffset(5, messageOffset);
          fbb.addOffset(6, targetSupervisorOffset);
          fbb.addOffset(7, targetScreenOffset);
          fbb.addInt64(8, object.timestamp.microsecondsSinceEpoch * 1000);
          fbb.addOffset(9, titleOffset);
          fbb.addBool(10, object.isSynced);
          fbb.finish(fbb.endTable());
          return object.obxId;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final obxIdParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final idParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final detailsParam = const fb.ListReader<String>(
                  fb.StringReader(asciiOptimization: true),
                  lazy: false)
              .vTableGet(buffer, rootOffset, 8, []);
          final imageUrlParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 10);
          final isReadParam =
              const fb.BoolReader().vTableGet(buffer, rootOffset, 12, false);
          final messageParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 14, '');
          final targetSupervisorParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 16, '');
          final targetScreenParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 18);
          final timestampParam = DateTime.fromMicrosecondsSinceEpoch(
              (const fb.Int64Reader().vTableGet(buffer, rootOffset, 20, 0) /
                      1000)
                  .round());
          final titleParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 22, '');
          final isSyncedParam =
              const fb.BoolReader().vTableGet(buffer, rootOffset, 24, false);
          final object = NotificationEntity(
              obxId: obxIdParam,
              id: idParam,
              details: detailsParam,
              imageUrl: imageUrlParam,
              isRead: isReadParam,
              message: messageParam,
              targetSupervisor: targetSupervisorParam,
              targetScreen: targetScreenParam,
              timestamp: timestampParam,
              title: titleParam,
              isSynced: isSyncedParam);

          return object;
        }),
    Picker: obx_int.EntityDefinition<Picker>(
        model: _entities[4],
        toOneRelations: (Picker object) => [],
        toManyRelations: (Picker object) => {},
        getId: (Picker object) => object.obxId,
        setId: (Picker object, int id) {
          object.obxId = id;
        },
        objectToFB: (Picker object, fb.Builder fbb) {
          final idOffset = fbb.writeString(object.id);
          final nameOffset = fbb.writeString(object.name);
          final emailOffset = fbb.writeString(object.email);
          final licenseNoOffset = fbb.writeString(object.licenseNo);
          final phoneNoOffset = fbb.writeString(object.phoneNo);
          final routeNameOffset = fbb.writeString(object.routeName);
          final assignedVehicleIdOffset =
              fbb.writeString(object.assignedVehicleId);
          final assignedVehicleNameOffset =
              fbb.writeString(object.assignedVehicleName);
          fbb.startTable(16);
          fbb.addInt64(0, object.obxId);
          fbb.addOffset(1, idOffset);
          fbb.addOffset(2, nameOffset);
          fbb.addOffset(3, emailOffset);
          fbb.addOffset(4, licenseNoOffset);
          fbb.addOffset(5, phoneNoOffset);
          fbb.addBool(6, object.isAvailable);
          fbb.addBool(7, object.isDriver);
          fbb.addBool(8, object.isHelper);
          fbb.addBool(9, object.isOnLeave);
          fbb.addBool(10, object.isPicker);
          fbb.addBool(11, object.isWorking);
          fbb.addOffset(12, routeNameOffset);
          fbb.addOffset(13, assignedVehicleIdOffset);
          fbb.addOffset(14, assignedVehicleNameOffset);
          fbb.finish(fbb.endTable());
          return object.obxId;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final obxIdParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final idParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final nameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 8, '');
          final emailParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 10, '');
          final licenseNoParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 12, '');
          final phoneNoParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 14, '');
          final isAvailableParam =
              const fb.BoolReader().vTableGet(buffer, rootOffset, 16, false);
          final isDriverParam =
              const fb.BoolReader().vTableGet(buffer, rootOffset, 18, false);
          final isHelperParam =
              const fb.BoolReader().vTableGet(buffer, rootOffset, 20, false);
          final isOnLeaveParam =
              const fb.BoolReader().vTableGet(buffer, rootOffset, 22, false);
          final isPickerParam =
              const fb.BoolReader().vTableGet(buffer, rootOffset, 24, false);
          final isWorkingParam =
              const fb.BoolReader().vTableGet(buffer, rootOffset, 26, false);
          final routeNameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 28, '');
          final assignedVehicleIdParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 30, '');
          final assignedVehicleNameParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 32, '');
          final object = Picker(
              obxId: obxIdParam,
              id: idParam,
              name: nameParam,
              email: emailParam,
              licenseNo: licenseNoParam,
              phoneNo: phoneNoParam,
              isAvailable: isAvailableParam,
              isDriver: isDriverParam,
              isHelper: isHelperParam,
              isOnLeave: isOnLeaveParam,
              isPicker: isPickerParam,
              isWorking: isWorkingParam,
              routeName: routeNameParam,
              assignedVehicleId: assignedVehicleIdParam,
              assignedVehicleName: assignedVehicleNameParam);

          return object;
        }),
    Pickup: obx_int.EntityDefinition<Pickup>(
        model: _entities[5],
        toOneRelations: (Pickup object) => [object.routeModel],
        toManyRelations: (Pickup object) => {
              obx_int.RelInfo<Item>.toOneBacklink(
                      4, object.obxId, (Item srcObject) => srcObject.pickup):
                  object.itemsData
            },
        getId: (Pickup object) => object.obxId,
        setId: (Pickup object, int id) {
          object.obxId = id;
        },
        objectToFB: (Pickup object, fb.Builder fbb) {
          final idOffset = fbb.writeString(object.id);
          final pickupIdOffset = fbb.writeString(object.pickupId);
          final nameOffset = fbb.writeString(object.name);
          final mobileNoOffset = fbb.writeString(object.mobileNo);
          final addressOffset = fbb.writeString(object.address);
          final areaOffset = fbb.writeString(object.area);
          final pincodeOffset = fbb.writeString(object.pincode);
          final aovOffset = fbb.writeString(object.aov);
          final descriptionOffset = fbb.writeString(object.description);
          final expectedWeightOffset = fbb.writeString(object.expectedWeight);
          final itemsOffset = fbb.writeList(
              object.items.map(fbb.writeString).toList(growable: false));
          final slotOffset = fbb.writeString(object.slot);
          final finalSlotOffset = fbb.writeString(object.finalSlot);
          final statusOffset = fbb.writeString(object.status);
          final subStatusOffset = fbb.writeString(object.subStatus);
          final lockedByOffset = fbb.writeString(object.lockedBy);
          final pickerIdOffset = fbb.writeString(object.pickerId);
          final pickerPhoneNoOffset = fbb.writeString(object.pickerPhoneNo);
          final helperIdOffset = fbb.writeString(object.helperId);
          final helperPhoneNoOffset = fbb.writeString(object.helperPhoneNo);
          final routeIdOffset = fbb.writeString(object.routeId);
          final mapLinkOffset = fbb.writeString(object.mapLink);
          final coordinatesOffset = fbb.writeList(
              object.coordinates.map(fbb.writeString).toList(growable: false));
          fbb.startTable(37);
          fbb.addInt64(0, object.obxId);
          fbb.addOffset(1, idOffset);
          fbb.addOffset(2, pickupIdOffset);
          fbb.addInt64(3, object.firebaseIndex);
          fbb.addOffset(4, nameOffset);
          fbb.addOffset(5, mobileNoOffset);
          fbb.addOffset(6, addressOffset);
          fbb.addOffset(7, areaOffset);
          fbb.addOffset(8, pincodeOffset);
          fbb.addOffset(9, aovOffset);
          fbb.addOffset(10, descriptionOffset);
          fbb.addOffset(11, expectedWeightOffset);
          fbb.addOffset(12, itemsOffset);
          fbb.addInt64(13, object.routeModel.targetId);
          fbb.addOffset(14, slotOffset);
          fbb.addOffset(15, finalSlotOffset);
          fbb.addOffset(16, statusOffset);
          fbb.addOffset(17, subStatusOffset);
          fbb.addBool(18, object.isCompleted);
          fbb.addBool(19, object.isLocked);
          fbb.addOffset(20, lockedByOffset);
          fbb.addOffset(21, pickerIdOffset);
          fbb.addOffset(22, pickerPhoneNoOffset);
          fbb.addOffset(23, helperIdOffset);
          fbb.addOffset(24, helperPhoneNoOffset);
          fbb.addOffset(25, routeIdOffset);
          fbb.addOffset(26, mapLinkOffset);
          fbb.addOffset(27, coordinatesOffset);
          fbb.addFloat64(28, object.totalPrice);
          fbb.addFloat64(29, object.totalWeightQuantity);
          fbb.addInt64(30, object.createdAt.millisecondsSinceEpoch);
          fbb.addInt64(31, object.date.millisecondsSinceEpoch);
          fbb.addInt64(32, object.finalDate.millisecondsSinceEpoch);
          fbb.addInt64(
              33,
              object.updatedAt == null
                  ? null
                  : object.updatedAt!.microsecondsSinceEpoch * 1000);
          fbb.addInt64(
              34,
              object.completedAt == null
                  ? null
                  : object.completedAt!.microsecondsSinceEpoch * 1000);
          fbb.addBool(35, object.isUpdated);
          fbb.finish(fbb.endTable());
          return object.obxId;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final updatedAtValue =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 70);
          final completedAtValue =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 72);
          final obxIdParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final idParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final pickupIdParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 8, '');
          final firebaseIndexParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 10, 0);
          final nameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 12, '');
          final mobileNoParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 14, '');
          final addressParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 16, '');
          final areaParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 18, '');
          final pincodeParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 20, '');
          final aovParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 22, '');
          final descriptionParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 24, '');
          final expectedWeightParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 26, '');
          final itemsParam = const fb.ListReader<String>(
                  fb.StringReader(asciiOptimization: true),
                  lazy: false)
              .vTableGet(buffer, rootOffset, 28, []);
          final slotParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 32, '');
          final finalSlotParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 34, '');
          final statusParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 36, '');
          final subStatusParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 38, '');
          final isCompletedParam =
              const fb.BoolReader().vTableGet(buffer, rootOffset, 40, false);
          final isLockedParam =
              const fb.BoolReader().vTableGet(buffer, rootOffset, 42, false);
          final lockedByParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 44, '');
          final pickerIdParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 46, '');
          final pickerPhoneNoParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 48, '');
          final helperIdParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 50, '');
          final helperPhoneNoParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 52, '');
          final routeIdParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 54, '');
          final mapLinkParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 56, '');
          final createdAtParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 64, 0));
          final dateParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 66, 0));
          final finalDateParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 68, 0));
          final updatedAtParam = updatedAtValue == null
              ? null
              : DateTime.fromMicrosecondsSinceEpoch(
                  (updatedAtValue / 1000).round());
          final coordinatesParam = const fb.ListReader<String>(
                  fb.StringReader(asciiOptimization: true),
                  lazy: false)
              .vTableGet(buffer, rootOffset, 58, []);
          final totalPriceParam =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 60, 0);
          final totalWeightQuantityParam =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 62, 0);
          final completedAtParam = completedAtValue == null
              ? null
              : DateTime.fromMicrosecondsSinceEpoch(
                  (completedAtValue / 1000).round());
          final isUpdatedParam =
              const fb.BoolReader().vTableGet(buffer, rootOffset, 74, false);
          final object = Pickup(
              obxId: obxIdParam,
              id: idParam,
              pickupId: pickupIdParam,
              firebaseIndex: firebaseIndexParam,
              name: nameParam,
              mobileNo: mobileNoParam,
              address: addressParam,
              area: areaParam,
              pincode: pincodeParam,
              aov: aovParam,
              description: descriptionParam,
              expectedWeight: expectedWeightParam,
              items: itemsParam,
              slot: slotParam,
              finalSlot: finalSlotParam,
              status: statusParam,
              subStatus: subStatusParam,
              isCompleted: isCompletedParam,
              isLocked: isLockedParam,
              lockedBy: lockedByParam,
              pickerId: pickerIdParam,
              pickerPhoneNo: pickerPhoneNoParam,
              helperId: helperIdParam,
              helperPhoneNo: helperPhoneNoParam,
              routeId: routeIdParam,
              mapLink: mapLinkParam,
              createdAt: createdAtParam,
              date: dateParam,
              finalDate: finalDateParam,
              updatedAt: updatedAtParam,
              coordinates: coordinatesParam,
              totalPrice: totalPriceParam,
              totalWeightQuantity: totalWeightQuantityParam,
              completedAt: completedAtParam,
              isUpdated: isUpdatedParam);
          object.routeModel.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 30, 0);
          object.routeModel.attach(store);
          obx_int.InternalToManyAccess.setRelInfo<Pickup>(
              object.itemsData,
              store,
              obx_int.RelInfo<Item>.toOneBacklink(
                  4, object.obxId, (Item srcObject) => srcObject.pickup));
          return object;
        }),
    Product: obx_int.EntityDefinition<Product>(
        model: _entities[6],
        toOneRelations: (Product object) => [],
        toManyRelations: (Product object) => {},
        getId: (Product object) => object.obxId,
        setId: (Product object, int id) {
          object.obxId = id;
        },
        objectToFB: (Product object, fb.Builder fbb) {
          final idOffset = fbb.writeString(object.id);
          final nameOffset = fbb.writeString(object.name);
          final priceOffset = fbb.writeString(object.price);
          final unitOffset = fbb.writeString(object.unit);
          fbb.startTable(6);
          fbb.addInt64(0, object.obxId);
          fbb.addOffset(1, idOffset);
          fbb.addOffset(2, nameOffset);
          fbb.addOffset(3, priceOffset);
          fbb.addOffset(4, unitOffset);
          fbb.finish(fbb.endTable());
          return object.obxId;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final obxIdParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final idParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final nameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 8, '');
          final priceParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 10, '');
          final unitParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 12, '');
          final object = Product(
              obxId: obxIdParam,
              id: idParam,
              name: nameParam,
              price: priceParam,
              unit: unitParam);

          return object;
        }),
    RouteModel: obx_int.EntityDefinition<RouteModel>(
        model: _entities[7],
        toOneRelations: (RouteModel object) => [],
        toManyRelations: (RouteModel object) => {
              obx_int.RelInfo<Pickup>.toOneBacklink(14, object.obxId,
                      (Pickup srcObject) => srcObject.routeModel):
                  object.pickupsData
            },
        getId: (RouteModel object) => object.obxId,
        setId: (RouteModel object, int id) {
          object.obxId = id;
        },
        objectToFB: (RouteModel object, fb.Builder fbb) {
          final idOffset = fbb.writeString(object.id);
          final nameOffset = fbb.writeString(object.name);
          final mapLinkOffset = fbb.writeString(object.mapLink);
          final morningAssetCheckOffset =
              fbb.writeString(object.morningAssetCheck);
          final eveningAssetCheckOffset =
              fbb.writeString(object.eveningAssetCheck);
          final morningSupervisorOffset =
              fbb.writeString(object.morningSupervisor);
          final eveningSupervisorOffset =
              fbb.writeString(object.eveningSupervisor);
          final pickerFirebaseIdOffset =
              fbb.writeString(object.pickerFirebaseId);
          final helperIdOffset = fbb.writeString(object.helperId);
          final pickupIdsOffset = fbb.writeList(
              object.pickupIds.map(fbb.writeString).toList(growable: false));
          fbb.startTable(14);
          fbb.addInt64(0, object.obxId);
          fbb.addOffset(1, idOffset);
          fbb.addOffset(2, nameOffset);
          fbb.addOffset(3, mapLinkOffset);
          fbb.addOffset(4, morningAssetCheckOffset);
          fbb.addOffset(5, eveningAssetCheckOffset);
          fbb.addOffset(6, morningSupervisorOffset);
          fbb.addOffset(7, eveningSupervisorOffset);
          fbb.addOffset(8, pickerFirebaseIdOffset);
          fbb.addOffset(9, helperIdOffset);
          fbb.addOffset(10, pickupIdsOffset);
          fbb.addInt64(11, object.scheduledDate.millisecondsSinceEpoch);
          fbb.addInt64(12, object.updatedAt.microsecondsSinceEpoch * 1000);
          fbb.finish(fbb.endTable());
          return object.obxId;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final obxIdParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final idParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final nameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 8, '');
          final morningAssetCheckParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 12, '');
          final eveningAssetCheckParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 14, '');
          final morningSupervisorParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 16, '');
          final eveningSupervisorParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 18, '');
          final pickerFirebaseIdParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 20, '');
          final helperIdParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 22, '');
          final pickupIdsParam = const fb.ListReader<String>(
                  fb.StringReader(asciiOptimization: true),
                  lazy: false)
              .vTableGet(buffer, rootOffset, 24, []);
          final mapLinkParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 10, '');
          final scheduledDateParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 26, 0));
          final updatedAtParam = DateTime.fromMicrosecondsSinceEpoch(
              (const fb.Int64Reader().vTableGet(buffer, rootOffset, 28, 0) /
                      1000)
                  .round());
          final object = RouteModel(
              obxId: obxIdParam,
              id: idParam,
              name: nameParam,
              morningAssetCheck: morningAssetCheckParam,
              eveningAssetCheck: eveningAssetCheckParam,
              morningSupervisor: morningSupervisorParam,
              eveningSupervisor: eveningSupervisorParam,
              pickerFirebaseId: pickerFirebaseIdParam,
              helperId: helperIdParam,
              pickupIds: pickupIdsParam,
              mapLink: mapLinkParam,
              scheduledDate: scheduledDateParam,
              updatedAt: updatedAtParam);
          obx_int.InternalToManyAccess.setRelInfo<RouteModel>(
              object.pickupsData,
              store,
              obx_int.RelInfo<Pickup>.toOneBacklink(14, object.obxId,
                  (Pickup srcObject) => srcObject.routeModel));
          return object;
        }),
    SyncStatus: obx_int.EntityDefinition<SyncStatus>(
        model: _entities[8],
        toOneRelations: (SyncStatus object) => [],
        toManyRelations: (SyncStatus object) => {},
        getId: (SyncStatus object) => object.id,
        setId: (SyncStatus object, int id) {
          object.id = id;
        },
        objectToFB: (SyncStatus object, fb.Builder fbb) {
          fbb.startTable(5);
          fbb.addInt64(0, object.id);
          fbb.addBool(1, object.isSyncing);
          fbb.addBool(2, object.isSynced);
          fbb.addInt64(3, object.lastSyncTime.microsecondsSinceEpoch * 1000);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final isSyncingParam =
              const fb.BoolReader().vTableGet(buffer, rootOffset, 6, false);
          final isSyncedParam =
              const fb.BoolReader().vTableGet(buffer, rootOffset, 8, false);
          final lastSyncTimeParam = DateTime.fromMicrosecondsSinceEpoch(
              (const fb.Int64Reader().vTableGet(buffer, rootOffset, 10, 0) /
                      1000)
                  .round());
          final object = SyncStatus(
              id: idParam,
              isSyncing: isSyncingParam,
              isSynced: isSyncedParam,
              lastSyncTime: lastSyncTimeParam);

          return object;
        })
  };

  return obx_int.ModelDefinition(model, bindings);
}

/// [Item] entity fields to define ObjectBox queries.
class Item_ {
  /// See [Item.obxId].
  static final obxId =
      obx.QueryIntegerProperty<Item>(_entities[0].properties[0]);

  /// See [Item.id].
  static final id = obx.QueryStringProperty<Item>(_entities[0].properties[1]);

  /// See [Item.productRef].
  static final productRef =
      obx.QueryRelationToOne<Item, Product>(_entities[0].properties[2]);

  /// See [Item.pickup].
  static final pickup =
      obx.QueryRelationToOne<Item, Pickup>(_entities[0].properties[3]);

  /// See [Item.localPickup].
  static final localPickup =
      obx.QueryRelationToOne<Item, LocalPickup>(_entities[0].properties[4]);

  /// See [Item.createdAt].
  static final createdAt =
      obx.QueryDateProperty<Item>(_entities[0].properties[5]);

  /// See [Item.localImagePaths].
  static final localImagePaths =
      obx.QueryStringVectorProperty<Item>(_entities[0].properties[6]);

  /// See [Item.imageUrls].
  static final imageUrls =
      obx.QueryStringVectorProperty<Item>(_entities[0].properties[7]);

  /// See [Item.isUploaded].
  static final isUploaded =
      obx.QueryBooleanProperty<Item>(_entities[0].properties[8]);

  /// See [Item.totalPrice].
  static final totalPrice =
      obx.QueryDoubleProperty<Item>(_entities[0].properties[9]);

  /// See [Item.customPrice].
  static final customPrice =
      obx.QueryDoubleProperty<Item>(_entities[0].properties[10]);

  /// See [Item.weight].
  static final weight =
      obx.QueryDoubleProperty<Item>(_entities[0].properties[11]);

  /// See [Item.quantity].
  static final quantity =
      obx.QueryDoubleProperty<Item>(_entities[0].properties[12]);

  /// See [Item.coordinates].
  static final coordinates =
      obx.QueryStringVectorProperty<Item>(_entities[0].properties[13]);
}

/// [LocalPickup] entity fields to define ObjectBox queries.
class LocalPickup_ {
  /// See [LocalPickup.obxId].
  static final obxId =
      obx.QueryIntegerProperty<LocalPickup>(_entities[1].properties[0]);

  /// See [LocalPickup.id].
  static final id =
      obx.QueryStringProperty<LocalPickup>(_entities[1].properties[1]);

  /// See [LocalPickup.pickupId].
  static final pickupId =
      obx.QueryStringProperty<LocalPickup>(_entities[1].properties[2]);

  /// See [LocalPickup.firebaseIndex].
  static final firebaseIndex =
      obx.QueryIntegerProperty<LocalPickup>(_entities[1].properties[3]);

  /// See [LocalPickup.name].
  static final name =
      obx.QueryStringProperty<LocalPickup>(_entities[1].properties[4]);

  /// See [LocalPickup.mobileNo].
  static final mobileNo =
      obx.QueryStringProperty<LocalPickup>(_entities[1].properties[5]);

  /// See [LocalPickup.address].
  static final address =
      obx.QueryStringProperty<LocalPickup>(_entities[1].properties[6]);

  /// See [LocalPickup.area].
  static final area =
      obx.QueryStringProperty<LocalPickup>(_entities[1].properties[7]);

  /// See [LocalPickup.pincode].
  static final pincode =
      obx.QueryStringProperty<LocalPickup>(_entities[1].properties[8]);

  /// See [LocalPickup.aov].
  static final aov =
      obx.QueryStringProperty<LocalPickup>(_entities[1].properties[9]);

  /// See [LocalPickup.description].
  static final description =
      obx.QueryStringProperty<LocalPickup>(_entities[1].properties[10]);

  /// See [LocalPickup.expectedWeight].
  static final expectedWeight =
      obx.QueryStringProperty<LocalPickup>(_entities[1].properties[11]);

  /// See [LocalPickup.items].
  static final items =
      obx.QueryStringVectorProperty<LocalPickup>(_entities[1].properties[12]);

  /// See [LocalPickup.routeModel].
  static final routeModel = obx.QueryRelationToOne<LocalPickup, RouteModel>(
      _entities[1].properties[13]);

  /// See [LocalPickup.slot].
  static final slot =
      obx.QueryStringProperty<LocalPickup>(_entities[1].properties[14]);

  /// See [LocalPickup.finalSlot].
  static final finalSlot =
      obx.QueryStringProperty<LocalPickup>(_entities[1].properties[15]);

  /// See [LocalPickup.status].
  static final status =
      obx.QueryStringProperty<LocalPickup>(_entities[1].properties[16]);

  /// See [LocalPickup.subStatus].
  static final subStatus =
      obx.QueryStringProperty<LocalPickup>(_entities[1].properties[17]);

  /// See [LocalPickup.isCompleted].
  static final isCompleted =
      obx.QueryBooleanProperty<LocalPickup>(_entities[1].properties[18]);

  /// See [LocalPickup.isLocked].
  static final isLocked =
      obx.QueryBooleanProperty<LocalPickup>(_entities[1].properties[19]);

  /// See [LocalPickup.lockedBy].
  static final lockedBy =
      obx.QueryStringProperty<LocalPickup>(_entities[1].properties[20]);

  /// See [LocalPickup.pickerId].
  static final pickerId =
      obx.QueryStringProperty<LocalPickup>(_entities[1].properties[21]);

  /// See [LocalPickup.pickerPhoneNo].
  static final pickerPhoneNo =
      obx.QueryStringProperty<LocalPickup>(_entities[1].properties[22]);

  /// See [LocalPickup.helperId].
  static final helperId =
      obx.QueryStringProperty<LocalPickup>(_entities[1].properties[23]);

  /// See [LocalPickup.helperPhoneNo].
  static final helperPhoneNo =
      obx.QueryStringProperty<LocalPickup>(_entities[1].properties[24]);

  /// See [LocalPickup.routeId].
  static final routeId =
      obx.QueryStringProperty<LocalPickup>(_entities[1].properties[25]);

  /// See [LocalPickup.mapLink].
  static final mapLink =
      obx.QueryStringProperty<LocalPickup>(_entities[1].properties[26]);

  /// See [LocalPickup.coordinates].
  static final coordinates =
      obx.QueryStringVectorProperty<LocalPickup>(_entities[1].properties[27]);

  /// See [LocalPickup.totalPrice].
  static final totalPrice =
      obx.QueryDoubleProperty<LocalPickup>(_entities[1].properties[28]);

  /// See [LocalPickup.totalWeightQuantity].
  static final totalWeightQuantity =
      obx.QueryDoubleProperty<LocalPickup>(_entities[1].properties[29]);

  /// See [LocalPickup.createdAt].
  static final createdAt =
      obx.QueryDateProperty<LocalPickup>(_entities[1].properties[30]);

  /// See [LocalPickup.date].
  static final date =
      obx.QueryDateProperty<LocalPickup>(_entities[1].properties[31]);

  /// See [LocalPickup.finalDate].
  static final finalDate =
      obx.QueryDateProperty<LocalPickup>(_entities[1].properties[32]);

  /// See [LocalPickup.updatedAt].
  static final updatedAt =
      obx.QueryDateNanoProperty<LocalPickup>(_entities[1].properties[33]);

  /// See [LocalPickup.completedAt].
  static final completedAt =
      obx.QueryDateNanoProperty<LocalPickup>(_entities[1].properties[34]);

  /// See [LocalPickup.isUpdated].
  static final isUpdated =
      obx.QueryBooleanProperty<LocalPickup>(_entities[1].properties[35]);

  /// see [LocalPickup.itemsData]
  static final itemsData =
      obx.QueryBacklinkToMany<Item, LocalPickup>(Item_.localPickup);
}

/// [Logger] entity fields to define ObjectBox queries.
class Logger_ {
  /// See [Logger.id].
  static final id =
      obx.QueryIntegerProperty<Logger>(_entities[2].properties[0]);

  /// See [Logger.statusIndex].
  static final statusIndex =
      obx.QueryIntegerProperty<Logger>(_entities[2].properties[1]);

  /// See [Logger.message].
  static final message =
      obx.QueryStringProperty<Logger>(_entities[2].properties[2]);
}

/// [NotificationEntity] entity fields to define ObjectBox queries.
class NotificationEntity_ {
  /// See [NotificationEntity.obxId].
  static final obxId =
      obx.QueryIntegerProperty<NotificationEntity>(_entities[3].properties[0]);

  /// See [NotificationEntity.id].
  static final id =
      obx.QueryStringProperty<NotificationEntity>(_entities[3].properties[1]);

  /// See [NotificationEntity.details].
  static final details = obx.QueryStringVectorProperty<NotificationEntity>(
      _entities[3].properties[2]);

  /// See [NotificationEntity.imageUrl].
  static final imageUrl =
      obx.QueryStringProperty<NotificationEntity>(_entities[3].properties[3]);

  /// See [NotificationEntity.isRead].
  static final isRead =
      obx.QueryBooleanProperty<NotificationEntity>(_entities[3].properties[4]);

  /// See [NotificationEntity.message].
  static final message =
      obx.QueryStringProperty<NotificationEntity>(_entities[3].properties[5]);

  /// See [NotificationEntity.targetSupervisor].
  static final targetSupervisor =
      obx.QueryStringProperty<NotificationEntity>(_entities[3].properties[6]);

  /// See [NotificationEntity.targetScreen].
  static final targetScreen =
      obx.QueryStringProperty<NotificationEntity>(_entities[3].properties[7]);

  /// See [NotificationEntity.timestamp].
  static final timestamp =
      obx.QueryDateNanoProperty<NotificationEntity>(_entities[3].properties[8]);

  /// See [NotificationEntity.title].
  static final title =
      obx.QueryStringProperty<NotificationEntity>(_entities[3].properties[9]);

  /// See [NotificationEntity.isSynced].
  static final isSynced =
      obx.QueryBooleanProperty<NotificationEntity>(_entities[3].properties[10]);
}

/// [Picker] entity fields to define ObjectBox queries.
class Picker_ {
  /// See [Picker.obxId].
  static final obxId =
      obx.QueryIntegerProperty<Picker>(_entities[4].properties[0]);

  /// See [Picker.id].
  static final id = obx.QueryStringProperty<Picker>(_entities[4].properties[1]);

  /// See [Picker.name].
  static final name =
      obx.QueryStringProperty<Picker>(_entities[4].properties[2]);

  /// See [Picker.email].
  static final email =
      obx.QueryStringProperty<Picker>(_entities[4].properties[3]);

  /// See [Picker.licenseNo].
  static final licenseNo =
      obx.QueryStringProperty<Picker>(_entities[4].properties[4]);

  /// See [Picker.phoneNo].
  static final phoneNo =
      obx.QueryStringProperty<Picker>(_entities[4].properties[5]);

  /// See [Picker.isAvailable].
  static final isAvailable =
      obx.QueryBooleanProperty<Picker>(_entities[4].properties[6]);

  /// See [Picker.isDriver].
  static final isDriver =
      obx.QueryBooleanProperty<Picker>(_entities[4].properties[7]);

  /// See [Picker.isHelper].
  static final isHelper =
      obx.QueryBooleanProperty<Picker>(_entities[4].properties[8]);

  /// See [Picker.isOnLeave].
  static final isOnLeave =
      obx.QueryBooleanProperty<Picker>(_entities[4].properties[9]);

  /// See [Picker.isPicker].
  static final isPicker =
      obx.QueryBooleanProperty<Picker>(_entities[4].properties[10]);

  /// See [Picker.isWorking].
  static final isWorking =
      obx.QueryBooleanProperty<Picker>(_entities[4].properties[11]);

  /// See [Picker.routeName].
  static final routeName =
      obx.QueryStringProperty<Picker>(_entities[4].properties[12]);

  /// See [Picker.assignedVehicleId].
  static final assignedVehicleId =
      obx.QueryStringProperty<Picker>(_entities[4].properties[13]);

  /// See [Picker.assignedVehicleName].
  static final assignedVehicleName =
      obx.QueryStringProperty<Picker>(_entities[4].properties[14]);
}

/// [Pickup] entity fields to define ObjectBox queries.
class Pickup_ {
  /// See [Pickup.obxId].
  static final obxId =
      obx.QueryIntegerProperty<Pickup>(_entities[5].properties[0]);

  /// See [Pickup.id].
  static final id = obx.QueryStringProperty<Pickup>(_entities[5].properties[1]);

  /// See [Pickup.pickupId].
  static final pickupId =
      obx.QueryStringProperty<Pickup>(_entities[5].properties[2]);

  /// See [Pickup.firebaseIndex].
  static final firebaseIndex =
      obx.QueryIntegerProperty<Pickup>(_entities[5].properties[3]);

  /// See [Pickup.name].
  static final name =
      obx.QueryStringProperty<Pickup>(_entities[5].properties[4]);

  /// See [Pickup.mobileNo].
  static final mobileNo =
      obx.QueryStringProperty<Pickup>(_entities[5].properties[5]);

  /// See [Pickup.address].
  static final address =
      obx.QueryStringProperty<Pickup>(_entities[5].properties[6]);

  /// See [Pickup.area].
  static final area =
      obx.QueryStringProperty<Pickup>(_entities[5].properties[7]);

  /// See [Pickup.pincode].
  static final pincode =
      obx.QueryStringProperty<Pickup>(_entities[5].properties[8]);

  /// See [Pickup.aov].
  static final aov =
      obx.QueryStringProperty<Pickup>(_entities[5].properties[9]);

  /// See [Pickup.description].
  static final description =
      obx.QueryStringProperty<Pickup>(_entities[5].properties[10]);

  /// See [Pickup.expectedWeight].
  static final expectedWeight =
      obx.QueryStringProperty<Pickup>(_entities[5].properties[11]);

  /// See [Pickup.items].
  static final items =
      obx.QueryStringVectorProperty<Pickup>(_entities[5].properties[12]);

  /// See [Pickup.routeModel].
  static final routeModel =
      obx.QueryRelationToOne<Pickup, RouteModel>(_entities[5].properties[13]);

  /// See [Pickup.slot].
  static final slot =
      obx.QueryStringProperty<Pickup>(_entities[5].properties[14]);

  /// See [Pickup.finalSlot].
  static final finalSlot =
      obx.QueryStringProperty<Pickup>(_entities[5].properties[15]);

  /// See [Pickup.status].
  static final status =
      obx.QueryStringProperty<Pickup>(_entities[5].properties[16]);

  /// See [Pickup.subStatus].
  static final subStatus =
      obx.QueryStringProperty<Pickup>(_entities[5].properties[17]);

  /// See [Pickup.isCompleted].
  static final isCompleted =
      obx.QueryBooleanProperty<Pickup>(_entities[5].properties[18]);

  /// See [Pickup.isLocked].
  static final isLocked =
      obx.QueryBooleanProperty<Pickup>(_entities[5].properties[19]);

  /// See [Pickup.lockedBy].
  static final lockedBy =
      obx.QueryStringProperty<Pickup>(_entities[5].properties[20]);

  /// See [Pickup.pickerId].
  static final pickerId =
      obx.QueryStringProperty<Pickup>(_entities[5].properties[21]);

  /// See [Pickup.pickerPhoneNo].
  static final pickerPhoneNo =
      obx.QueryStringProperty<Pickup>(_entities[5].properties[22]);

  /// See [Pickup.helperId].
  static final helperId =
      obx.QueryStringProperty<Pickup>(_entities[5].properties[23]);

  /// See [Pickup.helperPhoneNo].
  static final helperPhoneNo =
      obx.QueryStringProperty<Pickup>(_entities[5].properties[24]);

  /// See [Pickup.routeId].
  static final routeId =
      obx.QueryStringProperty<Pickup>(_entities[5].properties[25]);

  /// See [Pickup.mapLink].
  static final mapLink =
      obx.QueryStringProperty<Pickup>(_entities[5].properties[26]);

  /// See [Pickup.coordinates].
  static final coordinates =
      obx.QueryStringVectorProperty<Pickup>(_entities[5].properties[27]);

  /// See [Pickup.totalPrice].
  static final totalPrice =
      obx.QueryDoubleProperty<Pickup>(_entities[5].properties[28]);

  /// See [Pickup.totalWeightQuantity].
  static final totalWeightQuantity =
      obx.QueryDoubleProperty<Pickup>(_entities[5].properties[29]);

  /// See [Pickup.createdAt].
  static final createdAt =
      obx.QueryDateProperty<Pickup>(_entities[5].properties[30]);

  /// See [Pickup.date].
  static final date =
      obx.QueryDateProperty<Pickup>(_entities[5].properties[31]);

  /// See [Pickup.finalDate].
  static final finalDate =
      obx.QueryDateProperty<Pickup>(_entities[5].properties[32]);

  /// See [Pickup.updatedAt].
  static final updatedAt =
      obx.QueryDateNanoProperty<Pickup>(_entities[5].properties[33]);

  /// See [Pickup.completedAt].
  static final completedAt =
      obx.QueryDateNanoProperty<Pickup>(_entities[5].properties[34]);

  /// See [Pickup.isUpdated].
  static final isUpdated =
      obx.QueryBooleanProperty<Pickup>(_entities[5].properties[35]);

  /// see [Pickup.itemsData]
  static final itemsData = obx.QueryBacklinkToMany<Item, Pickup>(Item_.pickup);
}

/// [Product] entity fields to define ObjectBox queries.
class Product_ {
  /// See [Product.obxId].
  static final obxId =
      obx.QueryIntegerProperty<Product>(_entities[6].properties[0]);

  /// See [Product.id].
  static final id =
      obx.QueryStringProperty<Product>(_entities[6].properties[1]);

  /// See [Product.name].
  static final name =
      obx.QueryStringProperty<Product>(_entities[6].properties[2]);

  /// See [Product.price].
  static final price =
      obx.QueryStringProperty<Product>(_entities[6].properties[3]);

  /// See [Product.unit].
  static final unit =
      obx.QueryStringProperty<Product>(_entities[6].properties[4]);
}

/// [RouteModel] entity fields to define ObjectBox queries.
class RouteModel_ {
  /// See [RouteModel.obxId].
  static final obxId =
      obx.QueryIntegerProperty<RouteModel>(_entities[7].properties[0]);

  /// See [RouteModel.id].
  static final id =
      obx.QueryStringProperty<RouteModel>(_entities[7].properties[1]);

  /// See [RouteModel.name].
  static final name =
      obx.QueryStringProperty<RouteModel>(_entities[7].properties[2]);

  /// See [RouteModel.mapLink].
  static final mapLink =
      obx.QueryStringProperty<RouteModel>(_entities[7].properties[3]);

  /// See [RouteModel.morningAssetCheck].
  static final morningAssetCheck =
      obx.QueryStringProperty<RouteModel>(_entities[7].properties[4]);

  /// See [RouteModel.eveningAssetCheck].
  static final eveningAssetCheck =
      obx.QueryStringProperty<RouteModel>(_entities[7].properties[5]);

  /// See [RouteModel.morningSupervisor].
  static final morningSupervisor =
      obx.QueryStringProperty<RouteModel>(_entities[7].properties[6]);

  /// See [RouteModel.eveningSupervisor].
  static final eveningSupervisor =
      obx.QueryStringProperty<RouteModel>(_entities[7].properties[7]);

  /// See [RouteModel.pickerFirebaseId].
  static final pickerFirebaseId =
      obx.QueryStringProperty<RouteModel>(_entities[7].properties[8]);

  /// See [RouteModel.helperId].
  static final helperId =
      obx.QueryStringProperty<RouteModel>(_entities[7].properties[9]);

  /// See [RouteModel.pickupIds].
  static final pickupIds =
      obx.QueryStringVectorProperty<RouteModel>(_entities[7].properties[10]);

  /// See [RouteModel.scheduledDate].
  static final scheduledDate =
      obx.QueryDateProperty<RouteModel>(_entities[7].properties[11]);

  /// See [RouteModel.updatedAt].
  static final updatedAt =
      obx.QueryDateNanoProperty<RouteModel>(_entities[7].properties[12]);

  /// see [RouteModel.pickupsData]
  static final pickupsData =
      obx.QueryBacklinkToMany<Pickup, RouteModel>(Pickup_.routeModel);
}

/// [SyncStatus] entity fields to define ObjectBox queries.
class SyncStatus_ {
  /// See [SyncStatus.id].
  static final id =
      obx.QueryIntegerProperty<SyncStatus>(_entities[8].properties[0]);

  /// See [SyncStatus.isSyncing].
  static final isSyncing =
      obx.QueryBooleanProperty<SyncStatus>(_entities[8].properties[1]);

  /// See [SyncStatus.isSynced].
  static final isSynced =
      obx.QueryBooleanProperty<SyncStatus>(_entities[8].properties[2]);

  /// See [SyncStatus.lastSyncTime].
  static final lastSyncTime =
      obx.QueryDateNanoProperty<SyncStatus>(_entities[8].properties[3]);
}
